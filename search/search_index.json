{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenue en Base de donn\u00e9es 2","title":"Accueil"},{"location":"#bienvenue-en-base-de-donnees-2","text":"","title":"Bienvenue en Base de donn\u00e9es 2"},{"location":"exercices/ex01/ex01_enonce/","text":"Exercice 1 - R\u00e9vision Question de se remettre en mode \"BD\", voici un petit exercice de r\u00e9vision des concepts vus durant le cours de Base de donn\u00e9es 1. En \u00e9quipe de 2 inscrivez moi dans un fichier sql les commandes et requ\u00eates que vous avez utilis\u00e9 pour compl\u00e9ter l'exercice. 1. Cr\u00e9ation d'une base de donn\u00e9es et importation d'une sauvegarde Cr\u00e9ez une nouvelle base de donn\u00e9es et nommez la exercice01_revision T\u00e9l\u00e9charger le fichier bd_athlete.sql . Lancer le script pour cr\u00e9er les tables et ajouter les donn\u00e9es. Allez-y en ligne de commande ou bien avec DBeaver 2. Ajout de cl\u00e9s \u00e9trang\u00e8res Ajoutez les cl\u00e9s \u00e9trang\u00e8res suivantes \u00e0 la table r\u00e9sultat . Pour chaque cl\u00e9, appliquez la strat\u00e9gie cascade \u00e0 la suppression et \u00e0 la mise \u00e0 jour. Le champs epreuve_id vers la cl\u00e9 primaire id de la table epreuve . Le champs athlete_id vers la cl\u00e9 primaire id de la table athlete . 3. Manipulation des donn\u00e9es S\u00e9lectionnez le titre de toutes les \u00e9preuves. Comptez combien d'athl\u00e8tes proviennent du Qu\u00e9bec. Comptez le nombre de r\u00e9sultat de l'athl\u00e8te N\u00e9h\u00e9mie Harbage . Le r\u00e9sultat devra respecter le format suivant : Affichez la liste des athl\u00e8tes qui ont particip\u00e9 au 10 kilom\u00e8tres de l'\u00e9dition du 20 juillet 2020 (Afficher le nom et le pr\u00e9nom) en ordre alphab\u00e9tique de nom et de pr\u00e9nom. Affichez les trois meilleurs temps du marathon du 20 juillet 2020. Les champs \u00e0 afficher sont le pr\u00e9nom et le nom de athl\u00e8te concat\u00e9n\u00e9 et le r\u00e9sultat. Dans le but de faire une liste de diffusion, affichez le nom, pr\u00e9nom et courriel des tous les athl\u00e8tes de plus de 65 ans. Pour chaque athl\u00e8tes, afficher leur meilleur temps pour chaque cat\u00e9gorie d'\u00e9preuves. Si l'athl\u00e8te n'a jamais particip\u00e9 \u00e0 une \u00e9preuve, inscrire '-' au lieu de son r\u00e9sultat. Les r\u00e9sultats doivent \u00eatre affich\u00e9 en hh:mm:ss.ms et les athl\u00e8tes doivent \u00eatre class\u00e9 en ordre alphab\u00e9tique de nom et pr\u00e9nom. Le r\u00e9sultat final devra respecter le format suivant : Comptez combien d'athl\u00e8tes ont particip\u00e9 au moins une fois \u00e0 chacune des 4 \u00e9preuves. Vous pouvez simplement afficher le nombre total d'athl\u00e8tes.","title":"Exercice 01 - Revision"},{"location":"exercices/ex01/ex01_enonce/#exercice-1-revision","text":"Question de se remettre en mode \"BD\", voici un petit exercice de r\u00e9vision des concepts vus durant le cours de Base de donn\u00e9es 1. En \u00e9quipe de 2 inscrivez moi dans un fichier sql les commandes et requ\u00eates que vous avez utilis\u00e9 pour compl\u00e9ter l'exercice.","title":"Exercice 1 - R\u00e9vision"},{"location":"exercices/ex01/ex01_enonce/#1-creation-dune-base-de-donnees-et-importation-dune-sauvegarde","text":"Cr\u00e9ez une nouvelle base de donn\u00e9es et nommez la exercice01_revision T\u00e9l\u00e9charger le fichier bd_athlete.sql . Lancer le script pour cr\u00e9er les tables et ajouter les donn\u00e9es. Allez-y en ligne de commande ou bien avec DBeaver","title":"1. Cr\u00e9ation d'une base de donn\u00e9es et importation d'une sauvegarde"},{"location":"exercices/ex01/ex01_enonce/#2-ajout-de-cles-etrangeres","text":"Ajoutez les cl\u00e9s \u00e9trang\u00e8res suivantes \u00e0 la table r\u00e9sultat . Pour chaque cl\u00e9, appliquez la strat\u00e9gie cascade \u00e0 la suppression et \u00e0 la mise \u00e0 jour. Le champs epreuve_id vers la cl\u00e9 primaire id de la table epreuve . Le champs athlete_id vers la cl\u00e9 primaire id de la table athlete .","title":"2. Ajout de cl\u00e9s \u00e9trang\u00e8res"},{"location":"exercices/ex01/ex01_enonce/#3-manipulation-des-donnees","text":"S\u00e9lectionnez le titre de toutes les \u00e9preuves. Comptez combien d'athl\u00e8tes proviennent du Qu\u00e9bec. Comptez le nombre de r\u00e9sultat de l'athl\u00e8te N\u00e9h\u00e9mie Harbage . Le r\u00e9sultat devra respecter le format suivant : Affichez la liste des athl\u00e8tes qui ont particip\u00e9 au 10 kilom\u00e8tres de l'\u00e9dition du 20 juillet 2020 (Afficher le nom et le pr\u00e9nom) en ordre alphab\u00e9tique de nom et de pr\u00e9nom. Affichez les trois meilleurs temps du marathon du 20 juillet 2020. Les champs \u00e0 afficher sont le pr\u00e9nom et le nom de athl\u00e8te concat\u00e9n\u00e9 et le r\u00e9sultat. Dans le but de faire une liste de diffusion, affichez le nom, pr\u00e9nom et courriel des tous les athl\u00e8tes de plus de 65 ans. Pour chaque athl\u00e8tes, afficher leur meilleur temps pour chaque cat\u00e9gorie d'\u00e9preuves. Si l'athl\u00e8te n'a jamais particip\u00e9 \u00e0 une \u00e9preuve, inscrire '-' au lieu de son r\u00e9sultat. Les r\u00e9sultats doivent \u00eatre affich\u00e9 en hh:mm:ss.ms et les athl\u00e8tes doivent \u00eatre class\u00e9 en ordre alphab\u00e9tique de nom et pr\u00e9nom. Le r\u00e9sultat final devra respecter le format suivant : Comptez combien d'athl\u00e8tes ont particip\u00e9 au moins une fois \u00e0 chacune des 4 \u00e9preuves. Vous pouvez simplement afficher le nombre total d'athl\u00e8tes.","title":"3. Manipulation des donn\u00e9es"},{"location":"exercices/ex02/ex02_enonce/","text":"Analyse du syst\u00e8me de stationnement du c\u00e9gep Pour notre premier cas, on va analyser le syst\u00e8me de droit de stationnement du c\u00e9gep. Vous devez analyser le syst\u00e8me et ensuite cr\u00e9er un mod\u00e8le entit\u00e9-association, soit sur papier ou avec un logiciel appropri\u00e9. Une fois termin\u00e9, me le remettre sur Teams dans la section devoir. On doit tout d'abord se cr\u00e9er un usager avec un courriel et un mot de passe. Ensuite l'usager cr\u00e9\u00e9 peut effectuer une commande qui d\u00e9terminera la dur\u00e9e du droit de stationnement et les v\u00e9hicules autoris\u00e9s selon leur plaque d'immatriculation. L'usager \u00e0 le choix entre trois type de droit : 30 jours 1 session annuelle Il peut entrer un maximum de 4 plaques d'immatriculation par commande. Un compte peut contenir plus de 4 plaque d'immatriculation, mais chaque plaque est associ\u00e9 \u00e0 une commande, un droit de stationnement. Pour les autres informations, r\u00e9f\u00e9rez-vous aux images suivantes : Dans la section Informations personnelles on retrouve le num\u00e9ro de DA ou d'employ\u00e9, le nom complet, le courriel et le num\u00e9ro de t\u00e9l\u00e9phone.","title":"Exercice 02 - Analyse du syst\u00e8me de stationnement"},{"location":"exercices/ex02/ex02_enonce/#analyse-du-systeme-de-stationnement-du-cegep","text":"Pour notre premier cas, on va analyser le syst\u00e8me de droit de stationnement du c\u00e9gep. Vous devez analyser le syst\u00e8me et ensuite cr\u00e9er un mod\u00e8le entit\u00e9-association, soit sur papier ou avec un logiciel appropri\u00e9. Une fois termin\u00e9, me le remettre sur Teams dans la section devoir. On doit tout d'abord se cr\u00e9er un usager avec un courriel et un mot de passe. Ensuite l'usager cr\u00e9\u00e9 peut effectuer une commande qui d\u00e9terminera la dur\u00e9e du droit de stationnement et les v\u00e9hicules autoris\u00e9s selon leur plaque d'immatriculation. L'usager \u00e0 le choix entre trois type de droit : 30 jours 1 session annuelle Il peut entrer un maximum de 4 plaques d'immatriculation par commande. Un compte peut contenir plus de 4 plaque d'immatriculation, mais chaque plaque est associ\u00e9 \u00e0 une commande, un droit de stationnement. Pour les autres informations, r\u00e9f\u00e9rez-vous aux images suivantes : Dans la section Informations personnelles on retrouve le num\u00e9ro de DA ou d'employ\u00e9, le nom complet, le courriel et le num\u00e9ro de t\u00e9l\u00e9phone.","title":"Analyse du syst\u00e8me de stationnement du c\u00e9gep"},{"location":"exercices/ex03/ex03_enonce/","text":"Exercice 03 - Mod\u00e9lisation d'un livre de recettes Consignes En \u00e9quipe de 4 vous devez analyser et mod\u00e9liser un livre de recettes. Les deux images qui suivent vous indique ce qui doit \u00eatre inclus dans la base de donn\u00e9es. Toutes les informations pr\u00e9sentent doivent \u00eatre sauvegard\u00e9es. Pr\u00e9cision sur les pictogrammes dans les recettes : Le bol repr\u00e9sente le temps de pr\u00e9paration de la recette La flamme est le temps de cuisson La main est un temps de pr\u00e9paration autre Vous devez me produire et remettre : Le mod\u00e8le entit\u00e9-association fait sur papier en classe. ( ou une photo de votre oeuvre d'art sur le tableau) Un diagramme des classes complet, avec les types de donn\u00e9es, les relations et qui respecte les trois premi\u00e8res formes normale. Vous pouvez me remettre le diagramme sous la forme que vous voulez. Un script sql de g\u00e9n\u00e9ration de la base de donn\u00e9es Vous devez respecter les trois premi\u00e8re forme normale et la convention de nommage qui est d\u00e9crite dans les notes de cours. Images Recette 1 Recette 2","title":"Exercice 03 - Mod\u00e9lisation d'un livre de recettes"},{"location":"exercices/ex03/ex03_enonce/#exercice-03-modelisation-dun-livre-de-recettes","text":"","title":"Exercice 03 - Mod\u00e9lisation d'un livre de recettes"},{"location":"exercices/ex03/ex03_enonce/#consignes","text":"En \u00e9quipe de 4 vous devez analyser et mod\u00e9liser un livre de recettes. Les deux images qui suivent vous indique ce qui doit \u00eatre inclus dans la base de donn\u00e9es. Toutes les informations pr\u00e9sentent doivent \u00eatre sauvegard\u00e9es. Pr\u00e9cision sur les pictogrammes dans les recettes : Le bol repr\u00e9sente le temps de pr\u00e9paration de la recette La flamme est le temps de cuisson La main est un temps de pr\u00e9paration autre Vous devez me produire et remettre : Le mod\u00e8le entit\u00e9-association fait sur papier en classe. ( ou une photo de votre oeuvre d'art sur le tableau) Un diagramme des classes complet, avec les types de donn\u00e9es, les relations et qui respecte les trois premi\u00e8res formes normale. Vous pouvez me remettre le diagramme sous la forme que vous voulez. Un script sql de g\u00e9n\u00e9ration de la base de donn\u00e9es Vous devez respecter les trois premi\u00e8re forme normale et la convention de nommage qui est d\u00e9crite dans les notes de cours.","title":"Consignes"},{"location":"exercices/ex03/ex03_enonce/#images","text":"","title":"Images"},{"location":"exercices/ex03/ex03_enonce/#recette-1","text":"","title":"Recette 1"},{"location":"exercices/ex03/ex03_enonce/#recette-2","text":"","title":"Recette 2"},{"location":"exercices/ex04/ex04_enonce/","text":"Exercice 4 - INSERT \u00c0 partir de la base de donn\u00e9es athl\u00e8te de l'exercice 01, (le script sql de g\u00e9n\u00e9ration est disponible ici ), r\u00e9alisez les requ\u00eates d'insertion suivante. Ins\u00e9rez-vous dans la table athl\u00e8te sans sp\u00e9cifier les noms de colonnes dans la requ\u00eate. Ins\u00e9rez un autre athl\u00e8te fictif mais en sp\u00e9cifiant seulement son nom, pr\u00e9nom et la date de naissance. R\u00e9cup\u00e9rez le id qui a \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9 automatiquement lors de la requ\u00eate pr\u00e9c\u00e9dente et faites afficher avec une requ\u00eate SELECT le message suivant : \"L'athl\u00e8te [prenom] [nom] a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s!\". Utilisez le id r\u00e9cup\u00e9r\u00e9 dans la clause WHERE de votre requ\u00eate. Cr\u00e9ez une nouvelle table appel\u00e9 athlete_quebec avec les colonnes suivante ( id cl\u00e9 primaire auto-incr\u00e9ment\u00e9, nom, pr\u00e9nom, ville ) Ins\u00e9rez dans cette table tous les athl\u00e8tes qui proviennent de la province du Qu\u00e9bec \u00e0 l'aide d'une requ\u00eate select. Je veux que vous me remettiez les requ\u00eates dans un script SQL avec pour chaque requ\u00eate d'insertion une requ\u00eate select qui va valider que les donn\u00e9es ont bien \u00e9t\u00e9 ajout\u00e9. Corrig\u00e9 -- 1. Ins\u00e9rez-vous dans la table athl\u00e8te sans sp\u00e9cifier les noms de colonnes -- dans la requ\u00eate. INSERT INTO athlete VALUES (501, 'Fr\u00e9chette', 'Mathieu', '1980-07-21', '2056 11e rang ouest', 'Princeville', 'Qu\u00e9bec', 'Canada', 'math.frechette@gmail.com'); SELECT * FROM athlete WHERE id = 501; -- 2. Ins\u00e9rez un autre athl\u00e8te fictif mais en sp\u00e9cifiant seulement son nom, -- pr\u00e9nom et la date de naissance. INSERT INTO athlete (nom, prenom, date_naissance) VALUES ('Fr\u00e9chette','Mathieu 2','1980-07-21'); SELECT * FROM athlete WHERE id = LAST_INSERT_ID() ; -- 3. R\u00e9cup\u00e9rez le id qui a \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9 automatiquement lors de la requ\u00eate -- pr\u00e9c\u00e9dente et faites afficher avec une requ\u00eate SELECT le message -- suivant : \"L'athl\u00e8te [prenom] [nom] a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s!\". Utilisez -- le id r\u00e9cup\u00e9r\u00e9 dans la clause WHERE de votre requ\u00eate. SELECT CONCAT(\"L'athl\u00e8te \", a.prenom, \" \", a.nom, \" a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s!\") FROM athlete a WHERE a.id = LAST_INSERT_ID(); -- 4. Cr\u00e9ez une nouvelle table appel\u00e9 athlete_quebec avec les colonnes -- suivante ( id cl\u00e9 primaire auto-incr\u00e9ment\u00e9, nom, pr\u00e9nom, ville ) CREATE TABLE IF NOT EXISTS athlete_quebec ( id INT AUTO_INCREMENT NOT NULL, nom VARCHAR(50), prenom VARCHAR(50), ville VARCHAR(50), CONSTRAINT PRIMARY KEY (id) ); -- 5. Ins\u00e9rez dans cette table tous les athl\u00e8tes qui proviennent de la -- province du Qu\u00e9bec \u00e0 l'aide d'une requ\u00eate select. INSERT INTO athlete_quebec (nom, prenom, ville) SELECT a.nom, a.prenom, a.ville FROM athlete a WHERE a.province = \"Qu\u00e9bec\"; SELECT * FROM athlete_quebec;","title":"Exercice 04 - Insert"},{"location":"exercices/ex04/ex04_enonce/#exercice-4-insert","text":"\u00c0 partir de la base de donn\u00e9es athl\u00e8te de l'exercice 01, (le script sql de g\u00e9n\u00e9ration est disponible ici ), r\u00e9alisez les requ\u00eates d'insertion suivante. Ins\u00e9rez-vous dans la table athl\u00e8te sans sp\u00e9cifier les noms de colonnes dans la requ\u00eate. Ins\u00e9rez un autre athl\u00e8te fictif mais en sp\u00e9cifiant seulement son nom, pr\u00e9nom et la date de naissance. R\u00e9cup\u00e9rez le id qui a \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9 automatiquement lors de la requ\u00eate pr\u00e9c\u00e9dente et faites afficher avec une requ\u00eate SELECT le message suivant : \"L'athl\u00e8te [prenom] [nom] a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s!\". Utilisez le id r\u00e9cup\u00e9r\u00e9 dans la clause WHERE de votre requ\u00eate. Cr\u00e9ez une nouvelle table appel\u00e9 athlete_quebec avec les colonnes suivante ( id cl\u00e9 primaire auto-incr\u00e9ment\u00e9, nom, pr\u00e9nom, ville ) Ins\u00e9rez dans cette table tous les athl\u00e8tes qui proviennent de la province du Qu\u00e9bec \u00e0 l'aide d'une requ\u00eate select. Je veux que vous me remettiez les requ\u00eates dans un script SQL avec pour chaque requ\u00eate d'insertion une requ\u00eate select qui va valider que les donn\u00e9es ont bien \u00e9t\u00e9 ajout\u00e9.","title":"Exercice 4 - INSERT"},{"location":"exercices/ex04/ex04_enonce/#corrige","text":"-- 1. Ins\u00e9rez-vous dans la table athl\u00e8te sans sp\u00e9cifier les noms de colonnes -- dans la requ\u00eate. INSERT INTO athlete VALUES (501, 'Fr\u00e9chette', 'Mathieu', '1980-07-21', '2056 11e rang ouest', 'Princeville', 'Qu\u00e9bec', 'Canada', 'math.frechette@gmail.com'); SELECT * FROM athlete WHERE id = 501; -- 2. Ins\u00e9rez un autre athl\u00e8te fictif mais en sp\u00e9cifiant seulement son nom, -- pr\u00e9nom et la date de naissance. INSERT INTO athlete (nom, prenom, date_naissance) VALUES ('Fr\u00e9chette','Mathieu 2','1980-07-21'); SELECT * FROM athlete WHERE id = LAST_INSERT_ID() ; -- 3. R\u00e9cup\u00e9rez le id qui a \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9 automatiquement lors de la requ\u00eate -- pr\u00e9c\u00e9dente et faites afficher avec une requ\u00eate SELECT le message -- suivant : \"L'athl\u00e8te [prenom] [nom] a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s!\". Utilisez -- le id r\u00e9cup\u00e9r\u00e9 dans la clause WHERE de votre requ\u00eate. SELECT CONCAT(\"L'athl\u00e8te \", a.prenom, \" \", a.nom, \" a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s!\") FROM athlete a WHERE a.id = LAST_INSERT_ID(); -- 4. Cr\u00e9ez une nouvelle table appel\u00e9 athlete_quebec avec les colonnes -- suivante ( id cl\u00e9 primaire auto-incr\u00e9ment\u00e9, nom, pr\u00e9nom, ville ) CREATE TABLE IF NOT EXISTS athlete_quebec ( id INT AUTO_INCREMENT NOT NULL, nom VARCHAR(50), prenom VARCHAR(50), ville VARCHAR(50), CONSTRAINT PRIMARY KEY (id) ); -- 5. Ins\u00e9rez dans cette table tous les athl\u00e8tes qui proviennent de la -- province du Qu\u00e9bec \u00e0 l'aide d'une requ\u00eate select. INSERT INTO athlete_quebec (nom, prenom, ville) SELECT a.nom, a.prenom, a.ville FROM athlete a WHERE a.province = \"Qu\u00e9bec\"; SELECT * FROM athlete_quebec;","title":"Corrig\u00e9"},{"location":"exercices/ex05/ex05_enonce/","text":"Exercice 5 - VIEW \u00c0 partir de la base de donn\u00e9es athl\u00e8te de l'exercice 01, (le script sql de g\u00e9n\u00e9ration est disponible ici ), creez les views suivantes : Cr\u00e9ez une view nomm\u00e9e resultat_hhmmss qui affiche le r\u00e9sultat format\u00e9 en heures, minutes, secondes (hh:mm:ss). Les colonnes de la view doivent \u00eatre les m\u00eames que la table resultat mais en ajoutant une colonne nomm\u00e9e resultat_hhmmss dans laquelle le calcul sera fait (id, athlete_id, epreuve_id, date_resultat, resultat_ms, resultat_hhmmss). Cr\u00e9ez une view nomm\u00e9e athlete_complet qui, en combinant les tables n\u00e9cessaires, affiche les athl\u00e8tes avec les colonnes suivantes, (id, nom pr\u00e9nom concat, date_epreuve, nom_epreuve, r\u00e9sultat). Attention, je veux que les noms de colonnes de la view soit identique \u00e0 ce que je demande entre parenth\u00e8se) \u00c0 partir de la view pr\u00e9c\u00e9dente, athlete_complet, s\u00e9lectionn\u00e9 les informations des athl\u00e8tes qui ont particip\u00e9 \u00e0 un marathon. Cr\u00e9ez une view nomm\u00e9e resultat_21juillet2020 qui va contenir toutes les informations de la table r\u00e9sultat mais uniquement pour la date du 21 juillet 2020. Modifier la view resultat_21juillet2020 pour qu'elle affiche les r\u00e9sultats du 14 juillet 2019. Modifier aussi son nom pour resultat_14juillet2019 Supprimer la view resultat_14juillet2019 Je veux que vous me remettiez les requ\u00eates dans un script SQL. Corrig\u00e9 -- #1 CREATE OR REPLACE VIEW resultat_hhmmss AS SELECT r.id, r.athlete_id, r.epreuve_id, r.date_resultat, r.resultat_ms, TIME_FORMAT(SEC_TO_TIME(r.resultat_ms / 1000), '%H:%i:%s') AS resultat_hhmmss FROM resultat r; -- #2 CREATE OR REPLACE VIEW athlete_complet (id, nom, date_epreuve, nom_epreuve, resultat) AS SELECT a.id, CONCAT(a.prenom, ' ', a.nom), rh.date_resultat, e.description, rh.resultat_hhmmss FROM athlete a INNER JOIN resultat_hhmmss rh ON rh.athlete_id = a.id INNER JOIN epreuve e ON e.id = rh.epreuve_id; -- J'ai r\u00e9utiliser ici la view cr\u00e9\u00e9 au num\u00e9ro 1 pour vous montrer -- qu'on peut tr\u00e8s bien utiliser une view dans une view -- #3 SELECT * FROM athlete_complet ac WHERE ac.nom_epreuve = 'Marathon'; -- #4 CREATE OR REPLACE VIEW resultat_21juillet2020 AS SELECT * FROM resultat r WHERE r.date_resultat = '2020-07-21'; -- #5 ALTER VIEW resultat_21juillet2020 AS SELECT * FROM resultat r WHERE r.date_resultat = '2019-07-14'; RENAME TABLE resultat_21juillet2020 TO resultat_14juillet2019; -- #6 DROP VIEW IF EXISTS resultat_14juillet2019;","title":"Exercice 05 - Les Views"},{"location":"exercices/ex05/ex05_enonce/#exercice-5-view","text":"\u00c0 partir de la base de donn\u00e9es athl\u00e8te de l'exercice 01, (le script sql de g\u00e9n\u00e9ration est disponible ici ), creez les views suivantes : Cr\u00e9ez une view nomm\u00e9e resultat_hhmmss qui affiche le r\u00e9sultat format\u00e9 en heures, minutes, secondes (hh:mm:ss). Les colonnes de la view doivent \u00eatre les m\u00eames que la table resultat mais en ajoutant une colonne nomm\u00e9e resultat_hhmmss dans laquelle le calcul sera fait (id, athlete_id, epreuve_id, date_resultat, resultat_ms, resultat_hhmmss). Cr\u00e9ez une view nomm\u00e9e athlete_complet qui, en combinant les tables n\u00e9cessaires, affiche les athl\u00e8tes avec les colonnes suivantes, (id, nom pr\u00e9nom concat, date_epreuve, nom_epreuve, r\u00e9sultat). Attention, je veux que les noms de colonnes de la view soit identique \u00e0 ce que je demande entre parenth\u00e8se) \u00c0 partir de la view pr\u00e9c\u00e9dente, athlete_complet, s\u00e9lectionn\u00e9 les informations des athl\u00e8tes qui ont particip\u00e9 \u00e0 un marathon. Cr\u00e9ez une view nomm\u00e9e resultat_21juillet2020 qui va contenir toutes les informations de la table r\u00e9sultat mais uniquement pour la date du 21 juillet 2020. Modifier la view resultat_21juillet2020 pour qu'elle affiche les r\u00e9sultats du 14 juillet 2019. Modifier aussi son nom pour resultat_14juillet2019 Supprimer la view resultat_14juillet2019 Je veux que vous me remettiez les requ\u00eates dans un script SQL.","title":"Exercice 5 - VIEW"},{"location":"exercices/ex05/ex05_enonce/#corrige","text":"-- #1 CREATE OR REPLACE VIEW resultat_hhmmss AS SELECT r.id, r.athlete_id, r.epreuve_id, r.date_resultat, r.resultat_ms, TIME_FORMAT(SEC_TO_TIME(r.resultat_ms / 1000), '%H:%i:%s') AS resultat_hhmmss FROM resultat r; -- #2 CREATE OR REPLACE VIEW athlete_complet (id, nom, date_epreuve, nom_epreuve, resultat) AS SELECT a.id, CONCAT(a.prenom, ' ', a.nom), rh.date_resultat, e.description, rh.resultat_hhmmss FROM athlete a INNER JOIN resultat_hhmmss rh ON rh.athlete_id = a.id INNER JOIN epreuve e ON e.id = rh.epreuve_id; -- J'ai r\u00e9utiliser ici la view cr\u00e9\u00e9 au num\u00e9ro 1 pour vous montrer -- qu'on peut tr\u00e8s bien utiliser une view dans une view -- #3 SELECT * FROM athlete_complet ac WHERE ac.nom_epreuve = 'Marathon'; -- #4 CREATE OR REPLACE VIEW resultat_21juillet2020 AS SELECT * FROM resultat r WHERE r.date_resultat = '2020-07-21'; -- #5 ALTER VIEW resultat_21juillet2020 AS SELECT * FROM resultat r WHERE r.date_resultat = '2019-07-14'; RENAME TABLE resultat_21juillet2020 TO resultat_14juillet2019; -- #6 DROP VIEW IF EXISTS resultat_14juillet2019;","title":"Corrig\u00e9"},{"location":"exercices/ex06/ex06_enonce/","text":"Exercice 06 - Cr\u00e9dit social Installation Les scripts sql de g\u00e9n\u00e9ration de la base de donn\u00e9es sont disponible sur Teams dans la section Fichiers > Supports de cours > Exercices > Exercice06 - Cr\u00e9dit social . Cr\u00e9ez une nouvelle base de donn\u00e9es nomm\u00e9e credit_social Cr\u00e9ez les tables en ex\u00e9cutant le script sql 01_create_table.sql Ins\u00e9rez les donn\u00e9es en ex\u00e9cutant les scripts suivants ( l'ordre est important ). Certains scripts comportent beaucoup de ligne, 50 000 pour 04_insert_citoyen, c'est normale que le temps ex\u00e9cution soit long. Cr\u00e9ez un script SQL par num\u00e9ro. Une fois termin\u00e9 remettez moi les 5 scripts dans le devoir sur Teams. Liste des scripts \u00e0 ex\u00e9cuter 02_insert_classe 03_insert_evenement_type 04_insert_citoyen 05_insert_evenement 06_insert_citoyen_evenement Diagramme des classes Descriptions La base de donn\u00e9es sert \u00e0 stocker des informations sur les citoyens pour \u00e9tablir leur score de cr\u00e9dit social, une note de bon comportement qui d\u00e9termine dans quel classe le citoyen est situ\u00e9. Calcul du cr\u00e9dit social En naissant, un citoyen se voit octroyer un cr\u00e9dit initial de 500 (par contre ce nombre pourrait \u00eatre modifi\u00e9 par le parti). Tout au long de sa vie, le total de ce cr\u00e9dit va fluctuer selon des \u00e9v\u00e9nements auquel le citoyen va participer. Donc le cr\u00e9dit social de chaque citoyen est la somme de son cr\u00e9dit initial et du score de tous les \u00e9v\u00e9nements auxquels il a particip\u00e9. Les \u00e9v\u00e9nements sont d\u00e9fini par un type et un score par d\u00e9faut (dans la table evenement_type , mais ce score peut \u00eatre ajust\u00e9 selon la nature de l'\u00e9v\u00e9nement (le champ score_ajustement de la table citoyen_evenement , s'il est \u00e0 null ne pas en tenir compte, sinon il outrepasse le score par d\u00e9faut de l'\u00e9v\u00e9nement). Le score de cr\u00e9dit social peut varier entre 0 et 1000. Calcul de la classe du citoyen Chaque citoyen appartient \u00e0 une classe selon son score de cr\u00e9dit social. \u00c7a lui donne droit \u00e0 certain avantage de sa classe mais aussi aux avantages de toutes les classes inf\u00e9rieurs. Pour appartenir \u00e0 une classe, le score de cr\u00e9dit social du citoyen doit \u00eatre sup\u00e9rieur au cr\u00e9dit minimum de cette classe ( colonne credit_min de la table classe ). La classe est recalcul\u00e9 chaque nuit selon son score actuel. Donc pour connaitre la classe d'un citoyen vous n'avez qu'\u00e0 utiliser le champ classe_id de la table citoyen. Exercices 1. Fonction calcul_credit() Cr\u00e9ez une fonction nomm\u00e9e calcul_credit qui prends en param\u00e8tre le id d'un citoyen et retourne le total du calcul de son cr\u00e9dit social. Param\u00eatres IN/OUT tYPE Valeur test id IN INT 20958 RETURNS OUT INT 365 Ex. Le citoyen Harry Walsh, id 20958, pin 51d8fbc8-d473-45f5-991e-15aea899e8f9, a un score de cr\u00e9dit social de 365. select calcul_credit(20958) as score_credit 2. Fonction privilege_valide() Cr\u00e9ez une fonction nomm\u00e9e privilege_valide qui prend en param\u00e8tre le code pin du citoyen ainsi que le id d'une classe. Si la classe du citoyen est \u00e9gale ou sup\u00e9rieur \u00e0 la classe pass\u00e9e en param\u00e8tre, retournez TRUE, sinon retournez FALSE. Pour d\u00e9termin\u00e9 si une classe est sup\u00e9rieur \u00e0 une autre, vous devez vous fiez \u00e0 la colonne credit_min de la table classe . Param\u00eatres IN/OUT tYPE Valeur test pin IN VARCHAR(100) 51d8fbc8-d473-45f5-991e-15aea899e8f9 classe_id IN INT 4 RETURNS OUT BOOLEAN FALSE Ex. Le citoyen Harry Walsh, id 20958, pin 51d8fbc8-d473-45f5-991e-15aea899e8f9 appartient \u00e0 la classe Delta. -- Cette requ\u00eate retournera 1 select privilege_valide('51d8fbc8-d473-45f5-991e-15aea899e8f9',4) as valide -- Cette requ\u00eate retournera 0 select privilege_valide('51d8fbc8-d473-45f5-991e-15aea899e8f9',3) as valide 3. Vue citoyen_avec_credit Cr\u00e9ez une vue nomm\u00e9e citoyen_avec_credit qui contiendra les champs suivants Nom colonne table colonne citoyen_id citoyen id nom citoyen nom, prenom (\"Walsh, Harry\") pin citoyen pin classe classe titre credit calcul\u00e9 Faites ensuite une requ\u00eate sur cette view pour afficher les informations du citoyen id 20958 4. Proc\u00e9dure stock\u00e9e liste_manifestant Cr\u00e9ez une proc\u00e9dure stock\u00e9e nomm\u00e9e liste_manifestant qui prend une date en param\u00e8tre et retourne une liste de manifestants qui \u00e9tait pr\u00e9sent. Assurez-vous que pour la date s\u00e9lectionn\u00e9e s'il y a un \u00e9v\u00e9nement il soit de type manifestation. Le r\u00e9sultat doit \u00eatre class\u00e9 en ordre alphab\u00e9tique de nom et pr\u00e9nom. Nom colonne table colonne citoyen_id citoyen id evenement_id evenement id nom citoyen nom, prenom (\"Walsh, Harry\") pin citoyen pin classe classe titre date_evenement evenement date_evenement notes evenement notes Faite ensuite une validation avec la date 2021-04-01, vous devriez avoir 17 enregistrements. Si vous essayer avec la date 2022-09-15 vous devriez en avoir aucun. 5. Proc\u00e9dure stock\u00e9e update_classe Cr\u00e9ez une proc\u00e9dure stock\u00e9e nomm\u00e9e update_classe qui va updater la classe de chaque citoyen. Il vous faudra calculer le cr\u00e9dit social de chacun, ensuite d\u00e9terminer dans quelle classe il appartient selon le cr\u00e9dit minimum de chaque classe. Vous devez parcourir tous les enregistrements de la table citoyen en utilisant un curseur. Si vous d\u00e9tectez une diff\u00e9rence entre la classe du citoyen et votre calcul, vous devez \"logger\" le probl\u00e8me dans la table log_update_classe . Pour tester votre procedure, limitez la requ\u00eate SELECT qui alimente le curseur \u00e0 un seul citoyen et modifier la valeur du champs credit_initial de ce citoyen pour que la valeur du champs classe_id ne soit plus valide. Dans l'exemple plus bas j'ai modifi\u00e9 la valeur du cr\u00e9dit initial du citoyen 2 pour 850, ce qui lui donne une classe de 2 (Beta) au lieu de 4 (Delta). Apr\u00e8s avoir lancer ma proc\u00e9dure, on peut voir que la valeur de classe_id a bien \u00e9t\u00e9 modifi\u00e9 et que l'op\u00e9ration a \u00e9t\u00e9 enregistr\u00e9 dans la table log_update_classe.","title":"Exercice 06 - Cr\u00e9dit social"},{"location":"exercices/ex06/ex06_enonce/#exercice-06-credit-social","text":"","title":"Exercice 06 - Cr\u00e9dit social"},{"location":"exercices/ex06/ex06_enonce/#installation","text":"Les scripts sql de g\u00e9n\u00e9ration de la base de donn\u00e9es sont disponible sur Teams dans la section Fichiers > Supports de cours > Exercices > Exercice06 - Cr\u00e9dit social . Cr\u00e9ez une nouvelle base de donn\u00e9es nomm\u00e9e credit_social Cr\u00e9ez les tables en ex\u00e9cutant le script sql 01_create_table.sql Ins\u00e9rez les donn\u00e9es en ex\u00e9cutant les scripts suivants ( l'ordre est important ). Certains scripts comportent beaucoup de ligne, 50 000 pour 04_insert_citoyen, c'est normale que le temps ex\u00e9cution soit long. Cr\u00e9ez un script SQL par num\u00e9ro. Une fois termin\u00e9 remettez moi les 5 scripts dans le devoir sur Teams. Liste des scripts \u00e0 ex\u00e9cuter 02_insert_classe 03_insert_evenement_type 04_insert_citoyen 05_insert_evenement 06_insert_citoyen_evenement","title":"Installation"},{"location":"exercices/ex06/ex06_enonce/#diagramme-des-classes","text":"","title":"Diagramme des classes"},{"location":"exercices/ex06/ex06_enonce/#descriptions","text":"La base de donn\u00e9es sert \u00e0 stocker des informations sur les citoyens pour \u00e9tablir leur score de cr\u00e9dit social, une note de bon comportement qui d\u00e9termine dans quel classe le citoyen est situ\u00e9.","title":"Descriptions"},{"location":"exercices/ex06/ex06_enonce/#calcul-du-credit-social","text":"En naissant, un citoyen se voit octroyer un cr\u00e9dit initial de 500 (par contre ce nombre pourrait \u00eatre modifi\u00e9 par le parti). Tout au long de sa vie, le total de ce cr\u00e9dit va fluctuer selon des \u00e9v\u00e9nements auquel le citoyen va participer. Donc le cr\u00e9dit social de chaque citoyen est la somme de son cr\u00e9dit initial et du score de tous les \u00e9v\u00e9nements auxquels il a particip\u00e9. Les \u00e9v\u00e9nements sont d\u00e9fini par un type et un score par d\u00e9faut (dans la table evenement_type , mais ce score peut \u00eatre ajust\u00e9 selon la nature de l'\u00e9v\u00e9nement (le champ score_ajustement de la table citoyen_evenement , s'il est \u00e0 null ne pas en tenir compte, sinon il outrepasse le score par d\u00e9faut de l'\u00e9v\u00e9nement). Le score de cr\u00e9dit social peut varier entre 0 et 1000.","title":"Calcul du cr\u00e9dit social"},{"location":"exercices/ex06/ex06_enonce/#calcul-de-la-classe-du-citoyen","text":"Chaque citoyen appartient \u00e0 une classe selon son score de cr\u00e9dit social. \u00c7a lui donne droit \u00e0 certain avantage de sa classe mais aussi aux avantages de toutes les classes inf\u00e9rieurs. Pour appartenir \u00e0 une classe, le score de cr\u00e9dit social du citoyen doit \u00eatre sup\u00e9rieur au cr\u00e9dit minimum de cette classe ( colonne credit_min de la table classe ). La classe est recalcul\u00e9 chaque nuit selon son score actuel. Donc pour connaitre la classe d'un citoyen vous n'avez qu'\u00e0 utiliser le champ classe_id de la table citoyen.","title":"Calcul de la classe du citoyen"},{"location":"exercices/ex06/ex06_enonce/#exercices","text":"","title":"Exercices"},{"location":"exercices/ex06/ex06_enonce/#1-fonction-calcul_credit","text":"Cr\u00e9ez une fonction nomm\u00e9e calcul_credit qui prends en param\u00e8tre le id d'un citoyen et retourne le total du calcul de son cr\u00e9dit social. Param\u00eatres IN/OUT tYPE Valeur test id IN INT 20958 RETURNS OUT INT 365 Ex. Le citoyen Harry Walsh, id 20958, pin 51d8fbc8-d473-45f5-991e-15aea899e8f9, a un score de cr\u00e9dit social de 365. select calcul_credit(20958) as score_credit","title":"1. Fonction calcul_credit()"},{"location":"exercices/ex06/ex06_enonce/#2-fonction-privilege_valide","text":"Cr\u00e9ez une fonction nomm\u00e9e privilege_valide qui prend en param\u00e8tre le code pin du citoyen ainsi que le id d'une classe. Si la classe du citoyen est \u00e9gale ou sup\u00e9rieur \u00e0 la classe pass\u00e9e en param\u00e8tre, retournez TRUE, sinon retournez FALSE. Pour d\u00e9termin\u00e9 si une classe est sup\u00e9rieur \u00e0 une autre, vous devez vous fiez \u00e0 la colonne credit_min de la table classe . Param\u00eatres IN/OUT tYPE Valeur test pin IN VARCHAR(100) 51d8fbc8-d473-45f5-991e-15aea899e8f9 classe_id IN INT 4 RETURNS OUT BOOLEAN FALSE Ex. Le citoyen Harry Walsh, id 20958, pin 51d8fbc8-d473-45f5-991e-15aea899e8f9 appartient \u00e0 la classe Delta. -- Cette requ\u00eate retournera 1 select privilege_valide('51d8fbc8-d473-45f5-991e-15aea899e8f9',4) as valide -- Cette requ\u00eate retournera 0 select privilege_valide('51d8fbc8-d473-45f5-991e-15aea899e8f9',3) as valide","title":"2. Fonction privilege_valide()"},{"location":"exercices/ex06/ex06_enonce/#3-vue-citoyen_avec_credit","text":"Cr\u00e9ez une vue nomm\u00e9e citoyen_avec_credit qui contiendra les champs suivants Nom colonne table colonne citoyen_id citoyen id nom citoyen nom, prenom (\"Walsh, Harry\") pin citoyen pin classe classe titre credit calcul\u00e9 Faites ensuite une requ\u00eate sur cette view pour afficher les informations du citoyen id 20958","title":"3. Vue citoyen_avec_credit"},{"location":"exercices/ex06/ex06_enonce/#4-procedure-stockee-liste_manifestant","text":"Cr\u00e9ez une proc\u00e9dure stock\u00e9e nomm\u00e9e liste_manifestant qui prend une date en param\u00e8tre et retourne une liste de manifestants qui \u00e9tait pr\u00e9sent. Assurez-vous que pour la date s\u00e9lectionn\u00e9e s'il y a un \u00e9v\u00e9nement il soit de type manifestation. Le r\u00e9sultat doit \u00eatre class\u00e9 en ordre alphab\u00e9tique de nom et pr\u00e9nom. Nom colonne table colonne citoyen_id citoyen id evenement_id evenement id nom citoyen nom, prenom (\"Walsh, Harry\") pin citoyen pin classe classe titre date_evenement evenement date_evenement notes evenement notes Faite ensuite une validation avec la date 2021-04-01, vous devriez avoir 17 enregistrements. Si vous essayer avec la date 2022-09-15 vous devriez en avoir aucun.","title":"4. Proc\u00e9dure stock\u00e9e liste_manifestant"},{"location":"exercices/ex06/ex06_enonce/#5-procedure-stockee-update_classe","text":"Cr\u00e9ez une proc\u00e9dure stock\u00e9e nomm\u00e9e update_classe qui va updater la classe de chaque citoyen. Il vous faudra calculer le cr\u00e9dit social de chacun, ensuite d\u00e9terminer dans quelle classe il appartient selon le cr\u00e9dit minimum de chaque classe. Vous devez parcourir tous les enregistrements de la table citoyen en utilisant un curseur. Si vous d\u00e9tectez une diff\u00e9rence entre la classe du citoyen et votre calcul, vous devez \"logger\" le probl\u00e8me dans la table log_update_classe . Pour tester votre procedure, limitez la requ\u00eate SELECT qui alimente le curseur \u00e0 un seul citoyen et modifier la valeur du champs credit_initial de ce citoyen pour que la valeur du champs classe_id ne soit plus valide. Dans l'exemple plus bas j'ai modifi\u00e9 la valeur du cr\u00e9dit initial du citoyen 2 pour 850, ce qui lui donne une classe de 2 (Beta) au lieu de 4 (Delta). Apr\u00e8s avoir lancer ma proc\u00e9dure, on peut voir que la valeur de classe_id a bien \u00e9t\u00e9 modifi\u00e9 et que l'op\u00e9ration a \u00e9t\u00e9 enregistr\u00e9 dans la table log_update_classe.","title":"5. Proc\u00e9dure stock\u00e9e update_classe"},{"location":"formatif/intra/intra_formatif_01/","text":"Examen intra - formatif Mise en situation Le projet de colonisation de la plan\u00e8te Mars est entr\u00e9 dans une nouvelle phase et le lancement du premier vol habit\u00e9 est pour bient\u00f4t. Vous avez \u00e9t\u00e9 choisi pour \u00eatre responsable de la gestion des informations sur l'\u00e9quipage. C'est une responsabilit\u00e9 tr\u00e8s importante, car une partie du succ\u00e8s de la mission r\u00e9side dans l'\u00e9quilibre psychologique du personnel embarqu\u00e9 dans le vaisseau. Voici une description de ce qu\u2019il est imp\u00e9ratif d'avoir comme informations. Pour chaque membre de l'\u00e9quipage, on veut avoir leur nom, leur genre, leur pays d'origine et leur \u00e9tat civil. Vous devez aussi dresser la liste des enfants de cette personne. Attention, on nous rapporte qu'il y a des parents qui se sont port\u00e9s volontaires ensemble pour cette mission, alors deux membres d'\u00e9quipage peuvent avoir le m\u00eame enfant. Pr\u00e9cision suppl\u00e9mentaire, les enfants ne font pas partie du voyage . Chaque passager se voit aussi attribuer un matricule alphanum\u00e9rique de 10 \u00e0 20 caract\u00e8res. Finalement, on veut savoir si cette personne a effectu\u00e9 son service militaire ou non. Pour les enfants de l'\u00e9quipage, on n'a besoin que de leur nom et de pouvoir conna\u00eetre leur \u00e2ge. L'\u00e9quipage a \u00e9t\u00e9 s\u00e9lectionn\u00e9 selon les expertises de chacun qui ont \u00e9t\u00e9 jug\u00e9es utiles au bon d\u00e9roulement de la mission. Donc chaque membre de l'\u00e9quipage a une ou plusieurs professions. Pour palier en d'\u00e9ventuelles pertes humaines, nous avons s\u00e9lectionn\u00e9 plusieurs personnes ayant une m\u00eame profession. Pour \u00e9tablir une sorte de hi\u00e9rarchie, chaque personne a un grade d'attribuer pour chacune de ses professions. Le grade est un titre : Maitre, second ou rempla\u00e7ant. Ex.: Arthur Dallas est un pilote de grade \"second\". Derni\u00e8re chose \u00e0 retenir, chaque membre de l'\u00e9quipage devra subir des \u00e9valuations psychologiques r\u00e9guli\u00e8rement. Il est primordial que vous conserviez une trace de ces \u00e9valuations. Les \u00e9valuations se font de mani\u00e8re individuelle. Pour chaque \u00e9valuation, vous devez conserver le membre d'\u00e9quipage concern\u00e9 ainsi que le psychologue qui a men\u00e9 l'\u00e9valuation ( des passagers dont la profession est psychologue seront charg\u00e9s de faire les \u00e9valuations). Vous devez aussi conserver la date de l'\u00e9valuation ainsi que les notes et les recommandations du psychologue traitant. Directives Vous devez cr\u00e9er un diagramme de classes qui r\u00e9pond aux besoins de la mise en situation en respectant les points suivants : Votre mod\u00e8le doit r\u00e9pondre \u00e0 la convention de nomenclature telle que d\u00e9crite dans les notes de cours \"Analyse et mod\u00e9lisation de syst\u00e8mes\". Vous devez sp\u00e9cifier un type de donn\u00e9es pertinent pour chaque colonne de chaque table du diagramme. Pour les relations entre les tables, vous devez m'indiquer le type de relation en utilisant la notation (1 -- 1..n). Votre mod\u00e9lisation doit r\u00e9pondre aux r\u00e8gles de la troisi\u00e8me forme normale. Sur le diagramme, ajoutez le titre \"Examen Intra - Formatif\" ainsi que votre nom. La remise du diagramme se fera sous forme d'un fichier image nomm\u00e9 \"NomPr\u00e9nom - Examen Intra Formatif\" dans le devoir associ\u00e9 sur Teams. Corrig\u00e9 Si \u00e7a vous int\u00e9resse j'ai cr\u00e9\u00e9 un script SQL pour g\u00e9n\u00e9rer les tables du diagramme et y ins\u00e9rer des donn\u00e9es. Il est disponible ici . Ma version du diagramme","title":"formatif 01 - Voyage vers Mars"},{"location":"formatif/intra/intra_formatif_01/#examen-intra-formatif","text":"","title":"Examen intra - formatif"},{"location":"formatif/intra/intra_formatif_01/#mise-en-situation","text":"Le projet de colonisation de la plan\u00e8te Mars est entr\u00e9 dans une nouvelle phase et le lancement du premier vol habit\u00e9 est pour bient\u00f4t. Vous avez \u00e9t\u00e9 choisi pour \u00eatre responsable de la gestion des informations sur l'\u00e9quipage. C'est une responsabilit\u00e9 tr\u00e8s importante, car une partie du succ\u00e8s de la mission r\u00e9side dans l'\u00e9quilibre psychologique du personnel embarqu\u00e9 dans le vaisseau. Voici une description de ce qu\u2019il est imp\u00e9ratif d'avoir comme informations. Pour chaque membre de l'\u00e9quipage, on veut avoir leur nom, leur genre, leur pays d'origine et leur \u00e9tat civil. Vous devez aussi dresser la liste des enfants de cette personne. Attention, on nous rapporte qu'il y a des parents qui se sont port\u00e9s volontaires ensemble pour cette mission, alors deux membres d'\u00e9quipage peuvent avoir le m\u00eame enfant. Pr\u00e9cision suppl\u00e9mentaire, les enfants ne font pas partie du voyage . Chaque passager se voit aussi attribuer un matricule alphanum\u00e9rique de 10 \u00e0 20 caract\u00e8res. Finalement, on veut savoir si cette personne a effectu\u00e9 son service militaire ou non. Pour les enfants de l'\u00e9quipage, on n'a besoin que de leur nom et de pouvoir conna\u00eetre leur \u00e2ge. L'\u00e9quipage a \u00e9t\u00e9 s\u00e9lectionn\u00e9 selon les expertises de chacun qui ont \u00e9t\u00e9 jug\u00e9es utiles au bon d\u00e9roulement de la mission. Donc chaque membre de l'\u00e9quipage a une ou plusieurs professions. Pour palier en d'\u00e9ventuelles pertes humaines, nous avons s\u00e9lectionn\u00e9 plusieurs personnes ayant une m\u00eame profession. Pour \u00e9tablir une sorte de hi\u00e9rarchie, chaque personne a un grade d'attribuer pour chacune de ses professions. Le grade est un titre : Maitre, second ou rempla\u00e7ant. Ex.: Arthur Dallas est un pilote de grade \"second\". Derni\u00e8re chose \u00e0 retenir, chaque membre de l'\u00e9quipage devra subir des \u00e9valuations psychologiques r\u00e9guli\u00e8rement. Il est primordial que vous conserviez une trace de ces \u00e9valuations. Les \u00e9valuations se font de mani\u00e8re individuelle. Pour chaque \u00e9valuation, vous devez conserver le membre d'\u00e9quipage concern\u00e9 ainsi que le psychologue qui a men\u00e9 l'\u00e9valuation ( des passagers dont la profession est psychologue seront charg\u00e9s de faire les \u00e9valuations). Vous devez aussi conserver la date de l'\u00e9valuation ainsi que les notes et les recommandations du psychologue traitant.","title":"Mise en situation"},{"location":"formatif/intra/intra_formatif_01/#directives","text":"Vous devez cr\u00e9er un diagramme de classes qui r\u00e9pond aux besoins de la mise en situation en respectant les points suivants : Votre mod\u00e8le doit r\u00e9pondre \u00e0 la convention de nomenclature telle que d\u00e9crite dans les notes de cours \"Analyse et mod\u00e9lisation de syst\u00e8mes\". Vous devez sp\u00e9cifier un type de donn\u00e9es pertinent pour chaque colonne de chaque table du diagramme. Pour les relations entre les tables, vous devez m'indiquer le type de relation en utilisant la notation (1 -- 1..n). Votre mod\u00e9lisation doit r\u00e9pondre aux r\u00e8gles de la troisi\u00e8me forme normale. Sur le diagramme, ajoutez le titre \"Examen Intra - Formatif\" ainsi que votre nom. La remise du diagramme se fera sous forme d'un fichier image nomm\u00e9 \"NomPr\u00e9nom - Examen Intra Formatif\" dans le devoir associ\u00e9 sur Teams.","title":"Directives"},{"location":"formatif/intra/intra_formatif_01/#corrige","text":"Si \u00e7a vous int\u00e9resse j'ai cr\u00e9\u00e9 un script SQL pour g\u00e9n\u00e9rer les tables du diagramme et y ins\u00e9rer des donn\u00e9es. Il est disponible ici . Ma version du diagramme","title":"Corrig\u00e9"},{"location":"notes_de_cours/analyse/","text":"Mod\u00e8le entit\u00e9-association (entit\u00e9-relation) D\u00e9finition Le mod\u00e8le entit\u00e9-relation (ou entit\u00e9-association) permet de repr\u00e9senter de fa\u00e7on conceptuelle les donn\u00e9es d'un probl\u00e8me. Il nous fournit une repr\u00e9sentation graphique des associations entre les donn\u00e9es. \u00c7a nous sera tr\u00e8s utile pour cr\u00e9er des diagrammes et mod\u00e9liser diff\u00e9rents syst\u00e8mes. Le mod\u00e8le contient des entit\u00e9s qui repr\u00e9sentent les \u00e9l\u00e9ments du syst\u00e8me Des athl\u00e8tes, des r\u00e9sultats, des livres, des auteurs, etc. Le mod\u00e8le montre les associations entre les entit\u00e9s Quelle est l\u2019interaction entre les diff\u00e9rentes entit\u00e9s du syst\u00e8me Quelles sont les contraintes sur ces associations Mod\u00e9lisation Une entit\u00e9 est d\u00e9finie comme Une chose capable d\u2019avoir une existence ind\u00e9pendante. Une chose qui peut \u00eatre identifi\u00e9e de fa\u00e7on unique. Les associations repr\u00e9sentent comment les types d\u2019entit\u00e9s sont reli\u00e9s entre eux Les associations peuvent \u00eatre vues comme des verbes entre des entit\u00e9s Un athl\u00e8te r\u00e9alise un r\u00e9sultat Un livre est \u00e9crit par un auteur Les associations peuvent avoir des contraintes Un r\u00e9sultat ne peut \u00eatre r\u00e9alis\u00e9 que par un athl\u00e8te Un athl\u00e8te pour r\u00e9aliser plusieurs r\u00e9sultats Chaque entit\u00e9 et association peut avoir des attributs pour le d\u00e9finir. Le nom et pr\u00e9nom d'un athl\u00e8te, le titre d'un livre Pour r\u00e9sum\u00e9, si on traduit en langage de base de donn\u00e9es, une entit\u00e9 va correspondre \u00e0 une table et un attribut \u00e0 un champ. Les associations repr\u00e9sentent les relations entre les tables.","title":"Mod\u00e8le entit\u00e9-association"},{"location":"notes_de_cours/analyse/#modele-entite-association-entite-relation","text":"","title":"Mod\u00e8le entit\u00e9-association (entit\u00e9-relation)"},{"location":"notes_de_cours/analyse/#definition","text":"Le mod\u00e8le entit\u00e9-relation (ou entit\u00e9-association) permet de repr\u00e9senter de fa\u00e7on conceptuelle les donn\u00e9es d'un probl\u00e8me. Il nous fournit une repr\u00e9sentation graphique des associations entre les donn\u00e9es. \u00c7a nous sera tr\u00e8s utile pour cr\u00e9er des diagrammes et mod\u00e9liser diff\u00e9rents syst\u00e8mes. Le mod\u00e8le contient des entit\u00e9s qui repr\u00e9sentent les \u00e9l\u00e9ments du syst\u00e8me Des athl\u00e8tes, des r\u00e9sultats, des livres, des auteurs, etc. Le mod\u00e8le montre les associations entre les entit\u00e9s Quelle est l\u2019interaction entre les diff\u00e9rentes entit\u00e9s du syst\u00e8me Quelles sont les contraintes sur ces associations","title":"D\u00e9finition"},{"location":"notes_de_cours/analyse/#modelisation","text":"Une entit\u00e9 est d\u00e9finie comme Une chose capable d\u2019avoir une existence ind\u00e9pendante. Une chose qui peut \u00eatre identifi\u00e9e de fa\u00e7on unique. Les associations repr\u00e9sentent comment les types d\u2019entit\u00e9s sont reli\u00e9s entre eux Les associations peuvent \u00eatre vues comme des verbes entre des entit\u00e9s Un athl\u00e8te r\u00e9alise un r\u00e9sultat Un livre est \u00e9crit par un auteur Les associations peuvent avoir des contraintes Un r\u00e9sultat ne peut \u00eatre r\u00e9alis\u00e9 que par un athl\u00e8te Un athl\u00e8te pour r\u00e9aliser plusieurs r\u00e9sultats Chaque entit\u00e9 et association peut avoir des attributs pour le d\u00e9finir. Le nom et pr\u00e9nom d'un athl\u00e8te, le titre d'un livre Pour r\u00e9sum\u00e9, si on traduit en langage de base de donn\u00e9es, une entit\u00e9 va correspondre \u00e0 une table et un attribut \u00e0 un champ. Les associations repr\u00e9sentent les relations entre les tables.","title":"Mod\u00e9lisation"},{"location":"notes_de_cours/convention/","text":"Convention de nommage MySQL Bien que MySQL n'a pas vraiment de convention de nommage officiel, voici certaines des r\u00e8gles les plus utilis\u00e9es : R\u00e8gles g\u00e9n\u00e9rales Toujours \u00e9crire les noms en minuscule. \u00c7a peut aider \u00e0 \u00e9viter les erreurs, car MySQL est sensible \u00e0 la case Ne jamais utiliser d'espace, la remplacer par une barre de soulignement \"_\" Utilisez seulement des lettres dans les noms, pas de nombres ni de caract\u00e8res sp\u00e9ciaux \u00c9vitez d'utiliser un pr\u00e9fix dans le nom, \u00e7a complique inutilement le nom et nuit \u00e0 la visibilit\u00e9. Nom des tables Le nom doit \u00eatre au singulier Le nom doit \u00eatre en minuscule Ne pas utiliser de pr\u00e9fix sauf si c'est in\u00e9vitable. Le nom doit \u00eatre clair et explicite Ne pas utiliser d'abr\u00e9viation Nom des champs Le nom doit \u00eatre en minuscule, sans espace et sans nombres. On doit \u00e9viter les pr\u00e9fixes Utilisez un nom court, sans utiliser abr\u00e9viation par contre. Ne pas utiliser de mot r\u00e9serv\u00e9 comme nom de champs, comme date par exemple Le nom d'une cl\u00e9 \u00e9trang\u00e8re devrait contenir le nom de la table et de sa cl\u00e9 primaire. Une cl\u00e9 \u00e9trang\u00e8re vers la table usager dont la cl\u00e9 primaire est le champ id devrait \u00eatre nomm\u00e9e usager_id","title":"Convention de nommage MySQL"},{"location":"notes_de_cours/convention/#convention-de-nommage-mysql","text":"Bien que MySQL n'a pas vraiment de convention de nommage officiel, voici certaines des r\u00e8gles les plus utilis\u00e9es :","title":"Convention de nommage MySQL"},{"location":"notes_de_cours/convention/#regles-generales","text":"Toujours \u00e9crire les noms en minuscule. \u00c7a peut aider \u00e0 \u00e9viter les erreurs, car MySQL est sensible \u00e0 la case Ne jamais utiliser d'espace, la remplacer par une barre de soulignement \"_\" Utilisez seulement des lettres dans les noms, pas de nombres ni de caract\u00e8res sp\u00e9ciaux \u00c9vitez d'utiliser un pr\u00e9fix dans le nom, \u00e7a complique inutilement le nom et nuit \u00e0 la visibilit\u00e9.","title":"R\u00e8gles g\u00e9n\u00e9rales"},{"location":"notes_de_cours/convention/#nom-des-tables","text":"Le nom doit \u00eatre au singulier Le nom doit \u00eatre en minuscule Ne pas utiliser de pr\u00e9fix sauf si c'est in\u00e9vitable. Le nom doit \u00eatre clair et explicite Ne pas utiliser d'abr\u00e9viation","title":"Nom des tables"},{"location":"notes_de_cours/convention/#nom-des-champs","text":"Le nom doit \u00eatre en minuscule, sans espace et sans nombres. On doit \u00e9viter les pr\u00e9fixes Utilisez un nom court, sans utiliser abr\u00e9viation par contre. Ne pas utiliser de mot r\u00e9serv\u00e9 comme nom de champs, comme date par exemple Le nom d'une cl\u00e9 \u00e9trang\u00e8re devrait contenir le nom de la table et de sa cl\u00e9 primaire. Une cl\u00e9 \u00e9trang\u00e8re vers la table usager dont la cl\u00e9 primaire est le champ id devrait \u00eatre nomm\u00e9e usager_id","title":"Nom des champs"},{"location":"notes_de_cours/curseur/","text":"Les curseurs Parfois on peut vouloir effectuer un traitement sur chaque lignes du r\u00e9sultat d'une requ\u00eate. Les curseurs ( cursor ) nous permettent de parcourir justement de parcourir ligne par ligne un r\u00e9sultat, un peu \u00e0 la mani\u00e8re d'une boucle \"while\" en programmation. Il y a trois caract\u00e9ristiques \u00e0 savoir sur les curseurs : Ils sont en lecture seule, on ne peut pas modifier les valeurs du r\u00e9sultat. On ne peut que parcourir les lignes du r\u00e9sultat de la premi\u00e8re \u00e0 la derni\u00e8re et on ne peut pas sauter de ligne. Pour modifier \"l'ordre de lecture\" on doit utiliser le r\u00e9sultat avec la clause ORDER BY de la requ\u00eate qui g\u00e9n\u00e9rera le r\u00e9sultat. En MySQL, les donn\u00e9es du curseurs pointent vers les vrais donn\u00e9es de la base de donn\u00e9es. Ce qui veut dire que si une modification est faite durant l'utilisation du curseur, les donn\u00e9es de celui-ci seront aussi modifi\u00e9es. On peut utiliser les curseurs dans des proc\u00e9dures stock\u00e9es, des fonctions et des \"triggers\". L'utilisation des curseurs se fait en quatre \u00e9tapes : DECLARE : On d\u00e9clare notre curseur en lui sp\u00e9cifiant la requ\u00eate qui sera utilis\u00e9e OPEN : On \"ouvre\" notre curseur. On le place dans un \u00e9tat o\u00f9 il pourra recevoir les donn\u00e9es FETCH : On ajoute les donn\u00e9es de la ligne courante du r\u00e9sultat de la requ\u00eate. La valeur de chaque colonnes de la ligne de r\u00e9sultat sera ajout\u00e9 dans une variable que l'on aura d\u00e9clar\u00e9e pr\u00e9alablement. CLOSE : On ferme le curseur une fois notre utilisation termin\u00e9e. D\u00e9claration du curseur La d\u00e9claration du curseur doit se faire apr\u00e8s la d\u00e9claration des autres variables sinon MySQL va g\u00e9n\u00e9rer un erreur. La syntaxe pour d\u00e9clarer un curseur est la suivante : DECLARE mon_curseur CURSOR FROM requete_select; On doit toujours utiliser une requ\u00eate SELECT pour g\u00e9n\u00e9rer le r\u00e9sultat qui va \u00eatre utilis\u00e9 par le curseur. Voici un exemple o\u00f9 l'on voudrait utiliser le matricule des employ\u00e9es qui ont \u00e9t\u00e9 embauch\u00e9 il y a 5 ans ou plus DECLARE curseur_employe CURSOR FROM SELECT matricule FROM employe WHERE TIMESTAMPDIFF(year,date_embauche, now()) >= 5; Ouverture du curseur Pour ouvrir le curseur, on doit simplement utiliser la commande OPEN suivie du nom du curseur : OPEN mon_curseur; Si on reprend l'exemple plus haut, on ferais OPEN curseur_employe; Ajout de donn\u00e9es au curseur Une fois le curseur disponible, on peut y ajouter des donn\u00e9es avec la commande FETCH . On le verra plus loin mais le cette op\u00e9ration s'effectue \u00e0 l'int\u00e9rieur d'une boucle. Le r\u00e9sultat du FETCH sera les valeurs des colonnes du r\u00e9sultat pour la ligne courante. La syntaxe est la suivante : FETCH mon_curseur INTO liste de variable; Les variables doivent \u00eatre s\u00e9par\u00e9es par des espaces et correspondre au nombre de colonnes du r\u00e9sultat. Ces variables auront \u00e9t\u00e9 d\u00e9clar\u00e9 au d\u00e9but de la proc\u00e9dure comme on l'expliquait plus haut. En reprenant notre exemple, nom allons assigner la valeur du matricule de la ligne courante du r\u00e9sultat dans une variable nomm\u00e9e no_matricule : FETCH curseur_employe INTO no_matricule; Chaque fois qu'on execute la commande FETCH, MySQL essaie de lire la ligne suivante du r\u00e9sultat. S'il n'y a plus d'enregistrement (qu'on est \u00e0 la derni\u00e8re ligne), une exception sera lev\u00e9. On doit g\u00e9rer cette exception si on veut que tout se d\u00e9roule bien. Pour se faire, on va ajouter un HANDLER . Sa d\u00e9claration se fera apr\u00e8s la d\u00e9claration du curseur (on va voir plus loin l'ordre en d\u00e9tail avec un exemple). DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin_enregistrement = 1; En r\u00e9sum\u00e9, on indique \u00e0 MySQL que si il rencontre l'exception NOT FOUND de continuer le traitement ( CONTINUE ) et d'assigner \u00e0 la variable fin_enregistrement la valeur 1. La variable fin_enregistrement aura \u00e9t\u00e9 d\u00e9clar\u00e9 plus haut. Fermeture du curseur Finalement, une fois notre traitement termin\u00e9, il nous reste qu'\u00e0 fermer le curseur. CLOSE mon_curseur; ou avec notre exemple CLOSE curseur_employe; Exemple d'une proc\u00e9dure utilisant un curseur Une entreprise veut cr\u00e9er deux listes de diffusion pour ses employ\u00e9es, une premi\u00e8re pour les employ\u00e9es qui compte moins de x ann\u00e9es d'anciennet\u00e9s et une pour les autres (le nombre d'ann\u00e9es sera re\u00e7u en param\u00eatre). La liste comportera le nom et pr\u00e9nom de l'employ\u00e9 ainsi que son adresse courriel. Dans la base de donn\u00e9es il y a d\u00e9j\u00e0 deux tables qui ont \u00e9t\u00e9 cr\u00e9\u00e9 pour recevoir ces listes : employe_moins et employe_plus . En r\u00e9alit\u00e9 il y aurait plus d'\u00e9tapes en mettre en place dans notre proc\u00e9dure pour s'assurer de l'int\u00e9grit\u00e9 de nos donn\u00e9es (utiliser une transaction, vider les tables avant l'ajout, \"attraper\" les erreurs, etc...). Pour simplifier les choses prenons pour acquis que les tables sont vides et que tout va se d\u00e9rouler sans erreurs comme par magie. DELIMITER $$ CREATE PROCEDURE generer_liste_employe (IN nombre_annee) BEGIN -- D\u00e9claration de la variable utilis\u00e9e dans le handler \"NOT FOUND\" DECLARE fin_enregistrement INTEGER DEFAULT 0; -- D\u00e9claration des variables utilis\u00e9es dans le fetch du curseur DECLARE nom varchar(30) DEFAULT \"\"; DECLARE prenom varchar(30) DEFAULT \"\"; DECLARE courriel varchar(255) DEFAULT \"\"; DECLARE calcul_anciennete INT DEFAULT 0; -- D\u00e9claration du curseur des employ\u00e9es DEClARE curseur_employe CURSOR FOR SELECT nom, prenom, email, TIMESTAMPDIFF(year,date_embauche, now()) FROM employees; -- D\u00e9claration du handler NOT FOUND DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin_enregistrement = 1; -- Ouverture du curseur OPEN curseur_employe; -- D\u00e9but de la boucle liste_employee: LOOP -- On assigne les valeurs de la ligne du r\u00e9sultat aux variables FETCH curseur_employe INTO nom, prenom, courriel, calcul_anciennete; -- On s'assure qu'on n'a pas atteind la fin des enregistrements avant de continuer IF fin_enregistrement = 1 THEN LEAVE liste_employee; END IF; -- En utilisant la variable calcul_anciennete utilis\u00e9e dans le fetch et le param\u00eatre -- nombre_annee, on valide avec un si dans quelle tables ajout\u00e9es les donn\u00e9es IF calcul_anciennete < nombre_annee THEN INSERT INTO employe_moins(nom, prenom, courriel) VALUES (nom, prenom, courriel) ELSE INSERT INTO employe_plus(nom, prenom, courriel) VALUES (nom, prenom, courriel) END IF; END LOOP liste_employee; -- Fermeture du curseur CLOSE curseur_employe; END$$ DELIMITER ; Sources et documentation suppl\u00e9mentaire https://dev.mysql.com/doc/refman/8.0/en/cursors.html https://www.mysqltutorial.org/mysql-cursor/","title":"Les curseurs"},{"location":"notes_de_cours/curseur/#les-curseurs","text":"Parfois on peut vouloir effectuer un traitement sur chaque lignes du r\u00e9sultat d'une requ\u00eate. Les curseurs ( cursor ) nous permettent de parcourir justement de parcourir ligne par ligne un r\u00e9sultat, un peu \u00e0 la mani\u00e8re d'une boucle \"while\" en programmation. Il y a trois caract\u00e9ristiques \u00e0 savoir sur les curseurs : Ils sont en lecture seule, on ne peut pas modifier les valeurs du r\u00e9sultat. On ne peut que parcourir les lignes du r\u00e9sultat de la premi\u00e8re \u00e0 la derni\u00e8re et on ne peut pas sauter de ligne. Pour modifier \"l'ordre de lecture\" on doit utiliser le r\u00e9sultat avec la clause ORDER BY de la requ\u00eate qui g\u00e9n\u00e9rera le r\u00e9sultat. En MySQL, les donn\u00e9es du curseurs pointent vers les vrais donn\u00e9es de la base de donn\u00e9es. Ce qui veut dire que si une modification est faite durant l'utilisation du curseur, les donn\u00e9es de celui-ci seront aussi modifi\u00e9es. On peut utiliser les curseurs dans des proc\u00e9dures stock\u00e9es, des fonctions et des \"triggers\". L'utilisation des curseurs se fait en quatre \u00e9tapes : DECLARE : On d\u00e9clare notre curseur en lui sp\u00e9cifiant la requ\u00eate qui sera utilis\u00e9e OPEN : On \"ouvre\" notre curseur. On le place dans un \u00e9tat o\u00f9 il pourra recevoir les donn\u00e9es FETCH : On ajoute les donn\u00e9es de la ligne courante du r\u00e9sultat de la requ\u00eate. La valeur de chaque colonnes de la ligne de r\u00e9sultat sera ajout\u00e9 dans une variable que l'on aura d\u00e9clar\u00e9e pr\u00e9alablement. CLOSE : On ferme le curseur une fois notre utilisation termin\u00e9e.","title":"Les curseurs"},{"location":"notes_de_cours/curseur/#declaration-du-curseur","text":"La d\u00e9claration du curseur doit se faire apr\u00e8s la d\u00e9claration des autres variables sinon MySQL va g\u00e9n\u00e9rer un erreur. La syntaxe pour d\u00e9clarer un curseur est la suivante : DECLARE mon_curseur CURSOR FROM requete_select; On doit toujours utiliser une requ\u00eate SELECT pour g\u00e9n\u00e9rer le r\u00e9sultat qui va \u00eatre utilis\u00e9 par le curseur. Voici un exemple o\u00f9 l'on voudrait utiliser le matricule des employ\u00e9es qui ont \u00e9t\u00e9 embauch\u00e9 il y a 5 ans ou plus DECLARE curseur_employe CURSOR FROM SELECT matricule FROM employe WHERE TIMESTAMPDIFF(year,date_embauche, now()) >= 5;","title":"D\u00e9claration du curseur"},{"location":"notes_de_cours/curseur/#ouverture-du-curseur","text":"Pour ouvrir le curseur, on doit simplement utiliser la commande OPEN suivie du nom du curseur : OPEN mon_curseur; Si on reprend l'exemple plus haut, on ferais OPEN curseur_employe;","title":"Ouverture du curseur"},{"location":"notes_de_cours/curseur/#ajout-de-donnees-au-curseur","text":"Une fois le curseur disponible, on peut y ajouter des donn\u00e9es avec la commande FETCH . On le verra plus loin mais le cette op\u00e9ration s'effectue \u00e0 l'int\u00e9rieur d'une boucle. Le r\u00e9sultat du FETCH sera les valeurs des colonnes du r\u00e9sultat pour la ligne courante. La syntaxe est la suivante : FETCH mon_curseur INTO liste de variable; Les variables doivent \u00eatre s\u00e9par\u00e9es par des espaces et correspondre au nombre de colonnes du r\u00e9sultat. Ces variables auront \u00e9t\u00e9 d\u00e9clar\u00e9 au d\u00e9but de la proc\u00e9dure comme on l'expliquait plus haut. En reprenant notre exemple, nom allons assigner la valeur du matricule de la ligne courante du r\u00e9sultat dans une variable nomm\u00e9e no_matricule : FETCH curseur_employe INTO no_matricule; Chaque fois qu'on execute la commande FETCH, MySQL essaie de lire la ligne suivante du r\u00e9sultat. S'il n'y a plus d'enregistrement (qu'on est \u00e0 la derni\u00e8re ligne), une exception sera lev\u00e9. On doit g\u00e9rer cette exception si on veut que tout se d\u00e9roule bien. Pour se faire, on va ajouter un HANDLER . Sa d\u00e9claration se fera apr\u00e8s la d\u00e9claration du curseur (on va voir plus loin l'ordre en d\u00e9tail avec un exemple). DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin_enregistrement = 1; En r\u00e9sum\u00e9, on indique \u00e0 MySQL que si il rencontre l'exception NOT FOUND de continuer le traitement ( CONTINUE ) et d'assigner \u00e0 la variable fin_enregistrement la valeur 1. La variable fin_enregistrement aura \u00e9t\u00e9 d\u00e9clar\u00e9 plus haut.","title":"Ajout de donn\u00e9es au curseur"},{"location":"notes_de_cours/curseur/#fermeture-du-curseur","text":"Finalement, une fois notre traitement termin\u00e9, il nous reste qu'\u00e0 fermer le curseur. CLOSE mon_curseur; ou avec notre exemple CLOSE curseur_employe;","title":"Fermeture du curseur"},{"location":"notes_de_cours/curseur/#exemple-dune-procedure-utilisant-un-curseur","text":"Une entreprise veut cr\u00e9er deux listes de diffusion pour ses employ\u00e9es, une premi\u00e8re pour les employ\u00e9es qui compte moins de x ann\u00e9es d'anciennet\u00e9s et une pour les autres (le nombre d'ann\u00e9es sera re\u00e7u en param\u00eatre). La liste comportera le nom et pr\u00e9nom de l'employ\u00e9 ainsi que son adresse courriel. Dans la base de donn\u00e9es il y a d\u00e9j\u00e0 deux tables qui ont \u00e9t\u00e9 cr\u00e9\u00e9 pour recevoir ces listes : employe_moins et employe_plus . En r\u00e9alit\u00e9 il y aurait plus d'\u00e9tapes en mettre en place dans notre proc\u00e9dure pour s'assurer de l'int\u00e9grit\u00e9 de nos donn\u00e9es (utiliser une transaction, vider les tables avant l'ajout, \"attraper\" les erreurs, etc...). Pour simplifier les choses prenons pour acquis que les tables sont vides et que tout va se d\u00e9rouler sans erreurs comme par magie. DELIMITER $$ CREATE PROCEDURE generer_liste_employe (IN nombre_annee) BEGIN -- D\u00e9claration de la variable utilis\u00e9e dans le handler \"NOT FOUND\" DECLARE fin_enregistrement INTEGER DEFAULT 0; -- D\u00e9claration des variables utilis\u00e9es dans le fetch du curseur DECLARE nom varchar(30) DEFAULT \"\"; DECLARE prenom varchar(30) DEFAULT \"\"; DECLARE courriel varchar(255) DEFAULT \"\"; DECLARE calcul_anciennete INT DEFAULT 0; -- D\u00e9claration du curseur des employ\u00e9es DEClARE curseur_employe CURSOR FOR SELECT nom, prenom, email, TIMESTAMPDIFF(year,date_embauche, now()) FROM employees; -- D\u00e9claration du handler NOT FOUND DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin_enregistrement = 1; -- Ouverture du curseur OPEN curseur_employe; -- D\u00e9but de la boucle liste_employee: LOOP -- On assigne les valeurs de la ligne du r\u00e9sultat aux variables FETCH curseur_employe INTO nom, prenom, courriel, calcul_anciennete; -- On s'assure qu'on n'a pas atteind la fin des enregistrements avant de continuer IF fin_enregistrement = 1 THEN LEAVE liste_employee; END IF; -- En utilisant la variable calcul_anciennete utilis\u00e9e dans le fetch et le param\u00eatre -- nombre_annee, on valide avec un si dans quelle tables ajout\u00e9es les donn\u00e9es IF calcul_anciennete < nombre_annee THEN INSERT INTO employe_moins(nom, prenom, courriel) VALUES (nom, prenom, courriel) ELSE INSERT INTO employe_plus(nom, prenom, courriel) VALUES (nom, prenom, courriel) END IF; END LOOP liste_employee; -- Fermeture du curseur CLOSE curseur_employe; END$$ DELIMITER ;","title":"Exemple d'une proc\u00e9dure utilisant un curseur"},{"location":"notes_de_cours/curseur/#sources-et-documentation-supplementaire","text":"https://dev.mysql.com/doc/refman/8.0/en/cursors.html https://www.mysqltutorial.org/mysql-cursor/","title":"Sources et documentation suppl\u00e9mentaire"},{"location":"notes_de_cours/formes_normales/","text":"Formes normales Les formes normales sont un ensemble de r\u00e8gles qui, si elles sont suivies, nous assure de la robustesse de notre mod\u00e8le de donn\u00e9es. Elles nous offrent aussi les avantages suivants : \u00c9viter la redondance des donn\u00e9es Simplifier les mises \u00e0 jour Interdire les incoh\u00e9rences de donn\u00e9es venant des redondances Il existe 8 niveaux de formes normales, mais le plus souvent seulement les trois premi\u00e8res sont appliqu\u00e9es. C'est aussi ce que nous verrons dans le cadre du cours. Chaque forme normale doit respecter toutes les formes qui la pr\u00e9c\u00e8dent. Pour qu'on puisse dire qu'on est en troisi\u00e8me forme normale, il faut que la premi\u00e8re et deuxi\u00e8me forme soit respect\u00e9e. Premi\u00e8re forme normale (1FN) Dans la premi\u00e8re forme normale, on doit s'assurer que chaque attribut soit atomique, c'est-\u00e0-dire qu'il n'est pas une liste de valeurs ou bien compos\u00e9 (si on le d\u00e9compose, on obtient d'autres informations). Exemple d'une table usager qui n'est pas 1FN id nom email 1 Fr\u00e9chette, Mathieu math.frechette@gmail.com 2 Fr\u00e9chette, J\u00e9r\u00f4me jero@gmail.com, jerome.frechette@caramail.com 3 Mathis, Jennifer jennyM@gmail.com La forme n'est pas respect\u00e9e, car les valeurs de l'attribut nom sont compos\u00e9es et l'attribut email contient parfois une liste de valeur. Pour \u00eatre 1FN, on devrait cr\u00e9er une nouvelle table avec l'attribut email et s\u00e9parer l'attribut nom en deux, nom et pr\u00e9nom : table usager ID NOM PRENOM 1 Fr\u00e9chette Mathieu 2 Fr\u00e9chette J\u00e9r\u00f4me 3 Mathis Jennifer table email ID USAGER_ID EMAIL 1 1 math.frechette@gmail.com 2 2 jero@gmail.com 3 2 jerome.frechette@caramail.com 4 3 jennyM@gmail.com Impact de l'application de la r\u00e8gle Aucun attribut n\u2019est compos\u00e9 ou de valeurs multiples Impose par ce fait qu'un attribut membre de la cl\u00e9 primaire est toujours \u00e0 valeur unique Augmente grandement la performance en \u00e9vitant de parcourir des attributs sous forme de liste et en cr\u00e9ant des indexes plus performants. Deuxi\u00e8me forme normale (2FN) Pour \u00eatre en 2FN, il faut : Respecter la premi\u00e8re forme normale Que tous les attributs qui ne sont pas une cl\u00e9 primaire soient d\u00e9pendant en totalit\u00e9 de la ou des cl\u00e9s primaires. Supposons la table note_cours dans laquelle on veut enregistrer la note obtenue par cours par \u00e9tudiant : ETUDIANT_ID COURS_ID NOTE NOM_COURS 1 1 95 Programmation 1 2 1 88 Programmation 1 1 2 64 Design Web Cette table n'est pas 2FN, car l'attribut NOM_COURS est d\u00e9pendant de la cl\u00e9 COURS_ID, mais pas de la cl\u00e9 ETUDIANT_ID. L'attribut devrait \u00eatre enregistr\u00e9 dans une autre table. table note_cours ETUDIANT_ID COURS_ID NOTE 1 1 95 2 1 88 1 2 64 table cours ID NOM 1 Programmation 1 2 Design Web Impact de l'application de la r\u00e8gle Permets d'\u00e9liminer plusieurs redondances des donn\u00e9es. Facilite la mise \u00e0 jour des donn\u00e9es Troisi\u00e8me forme normale (3FN) Pour respecter la troisi\u00e8me forme normale, on doit : Remplir toutes les exigences de la deuxi\u00e8me r\u00e8gle normale, donc implicitement de la premi\u00e8re r\u00e8gle aussi. Tous les attributs qui ne sont pas une cl\u00e9 primaire doivent d\u00e9pendre directement de la cl\u00e9 primaire et non d'autres attributs de la table. Prenons par exemple la table inventaire suivante ID QUANTITE ITEM_ID DESCRIPTION 1 3 1 Potion de soins mineures 2 11 2 \u00c9p\u00e9e de cuivre Ici l'attribut DESCRIPTION est d\u00e9pendant de l'attribut ITEM_ID , mais pas de la cl\u00e9 primaire ID . La solution ici serait de supprimer l'attribut description de la table, en supposant que l'information se retrouve dans la table item . Impact de l'application de la r\u00e8gle Permets d'\u00e9liminer plusieurs redondances des donn\u00e9es. Facilite la mise \u00e0 jour des donn\u00e9es Dans certaines situations, une fois la troisi\u00e8me forme atteinte, il peut \u00eatre acceptable de briser la r\u00e8gle \u00e0 cause de certaines exigences ou probl\u00e9matiques pr\u00e9cise. Par exemple dans une table o\u00f9 on enregistre le d\u00e9tail d'une ligne de facture, le total de la ligne ne doit pas \u00eatre sauvegard\u00e9, car il peut \u00eatre calcul\u00e9 \u00e0 partir de la quantit\u00e9 et du prix unitaire. Par contre, si on a \u00e0 faire beaucoup d'op\u00e9ration avec le total de la ligne, on pourrait conserver le total dans une colonne pour faciliter le traitement.","title":"Les formes normales"},{"location":"notes_de_cours/formes_normales/#formes-normales","text":"Les formes normales sont un ensemble de r\u00e8gles qui, si elles sont suivies, nous assure de la robustesse de notre mod\u00e8le de donn\u00e9es. Elles nous offrent aussi les avantages suivants : \u00c9viter la redondance des donn\u00e9es Simplifier les mises \u00e0 jour Interdire les incoh\u00e9rences de donn\u00e9es venant des redondances Il existe 8 niveaux de formes normales, mais le plus souvent seulement les trois premi\u00e8res sont appliqu\u00e9es. C'est aussi ce que nous verrons dans le cadre du cours. Chaque forme normale doit respecter toutes les formes qui la pr\u00e9c\u00e8dent. Pour qu'on puisse dire qu'on est en troisi\u00e8me forme normale, il faut que la premi\u00e8re et deuxi\u00e8me forme soit respect\u00e9e.","title":"Formes normales"},{"location":"notes_de_cours/formes_normales/#premiere-forme-normale-1fn","text":"Dans la premi\u00e8re forme normale, on doit s'assurer que chaque attribut soit atomique, c'est-\u00e0-dire qu'il n'est pas une liste de valeurs ou bien compos\u00e9 (si on le d\u00e9compose, on obtient d'autres informations). Exemple d'une table usager qui n'est pas 1FN id nom email 1 Fr\u00e9chette, Mathieu math.frechette@gmail.com 2 Fr\u00e9chette, J\u00e9r\u00f4me jero@gmail.com, jerome.frechette@caramail.com 3 Mathis, Jennifer jennyM@gmail.com La forme n'est pas respect\u00e9e, car les valeurs de l'attribut nom sont compos\u00e9es et l'attribut email contient parfois une liste de valeur. Pour \u00eatre 1FN, on devrait cr\u00e9er une nouvelle table avec l'attribut email et s\u00e9parer l'attribut nom en deux, nom et pr\u00e9nom : table usager ID NOM PRENOM 1 Fr\u00e9chette Mathieu 2 Fr\u00e9chette J\u00e9r\u00f4me 3 Mathis Jennifer table email ID USAGER_ID EMAIL 1 1 math.frechette@gmail.com 2 2 jero@gmail.com 3 2 jerome.frechette@caramail.com 4 3 jennyM@gmail.com Impact de l'application de la r\u00e8gle Aucun attribut n\u2019est compos\u00e9 ou de valeurs multiples Impose par ce fait qu'un attribut membre de la cl\u00e9 primaire est toujours \u00e0 valeur unique Augmente grandement la performance en \u00e9vitant de parcourir des attributs sous forme de liste et en cr\u00e9ant des indexes plus performants.","title":"Premi\u00e8re forme normale (1FN)"},{"location":"notes_de_cours/formes_normales/#deuxieme-forme-normale-2fn","text":"Pour \u00eatre en 2FN, il faut : Respecter la premi\u00e8re forme normale Que tous les attributs qui ne sont pas une cl\u00e9 primaire soient d\u00e9pendant en totalit\u00e9 de la ou des cl\u00e9s primaires. Supposons la table note_cours dans laquelle on veut enregistrer la note obtenue par cours par \u00e9tudiant : ETUDIANT_ID COURS_ID NOTE NOM_COURS 1 1 95 Programmation 1 2 1 88 Programmation 1 1 2 64 Design Web Cette table n'est pas 2FN, car l'attribut NOM_COURS est d\u00e9pendant de la cl\u00e9 COURS_ID, mais pas de la cl\u00e9 ETUDIANT_ID. L'attribut devrait \u00eatre enregistr\u00e9 dans une autre table. table note_cours ETUDIANT_ID COURS_ID NOTE 1 1 95 2 1 88 1 2 64 table cours ID NOM 1 Programmation 1 2 Design Web Impact de l'application de la r\u00e8gle Permets d'\u00e9liminer plusieurs redondances des donn\u00e9es. Facilite la mise \u00e0 jour des donn\u00e9es","title":"Deuxi\u00e8me forme normale (2FN)"},{"location":"notes_de_cours/formes_normales/#troisieme-forme-normale-3fn","text":"Pour respecter la troisi\u00e8me forme normale, on doit : Remplir toutes les exigences de la deuxi\u00e8me r\u00e8gle normale, donc implicitement de la premi\u00e8re r\u00e8gle aussi. Tous les attributs qui ne sont pas une cl\u00e9 primaire doivent d\u00e9pendre directement de la cl\u00e9 primaire et non d'autres attributs de la table. Prenons par exemple la table inventaire suivante ID QUANTITE ITEM_ID DESCRIPTION 1 3 1 Potion de soins mineures 2 11 2 \u00c9p\u00e9e de cuivre Ici l'attribut DESCRIPTION est d\u00e9pendant de l'attribut ITEM_ID , mais pas de la cl\u00e9 primaire ID . La solution ici serait de supprimer l'attribut description de la table, en supposant que l'information se retrouve dans la table item . Impact de l'application de la r\u00e8gle Permets d'\u00e9liminer plusieurs redondances des donn\u00e9es. Facilite la mise \u00e0 jour des donn\u00e9es Dans certaines situations, une fois la troisi\u00e8me forme atteinte, il peut \u00eatre acceptable de briser la r\u00e8gle \u00e0 cause de certaines exigences ou probl\u00e9matiques pr\u00e9cise. Par exemple dans une table o\u00f9 on enregistre le d\u00e9tail d'une ligne de facture, le total de la ligne ne doit pas \u00eatre sauvegard\u00e9, car il peut \u00eatre calcul\u00e9 \u00e0 partir de la quantit\u00e9 et du prix unitaire. Par contre, si on a \u00e0 faire beaucoup d'op\u00e9ration avec le total de la ligne, on pourrait conserver le total dans une colonne pour faciliter le traitement.","title":"Troisi\u00e8me forme normale (3FN)"},{"location":"notes_de_cours/function/","text":"Les fonctions stock\u00e9es (Stored function) C'est quoi et \u00e0 quoi \u00e7a sert? Cr\u00e9ation d'une fonction Utilisation d'une fonction Modification d'une fonction Suppression d'une fonction","title":"Les fonctions stock\u00e9es (Stored function)"},{"location":"notes_de_cours/function/#les-fonctions-stockees-stored-function","text":"C'est quoi et \u00e0 quoi \u00e7a sert?","title":"Les fonctions stock\u00e9es (Stored function)"},{"location":"notes_de_cours/function/#creation-dune-fonction","text":"","title":"Cr\u00e9ation d'une fonction"},{"location":"notes_de_cours/function/#utilisation-dune-fonction","text":"","title":"Utilisation d'une fonction"},{"location":"notes_de_cours/function/#modification-dune-fonction","text":"","title":"Modification d'une fonction"},{"location":"notes_de_cours/function/#suppression-dune-fonction","text":"","title":"Suppression d'une fonction"},{"location":"notes_de_cours/insert/","text":"INSERT La commande INSERT est utilis\u00e9e pour ajouter des enregistrements dans une table. Syntaxe de base La m\u00e9thode la plus simple INSERT INTO ma_table VALUES (valeur1, valeur2, valeur3); Avantages - Requ\u00eate plus courte - Si on modifie les noms de colonnes, pas besoin de modifier la requ\u00eate. Inconv\u00e9nients Possibilit\u00e9 d'erreurs plus grande, il faut que les valeurs concordent avec le nombre de colonnes et leur position. La m\u00e9thode la plus pr\u00e9cise INSERT INTO ma_table (colonne1, colonne2, colonne3) VALUES (valeur1, valeur2, valeur3); Avantages - Plus de pr\u00e9cisions dans la requ\u00eate - On n'est pas forc\u00e9 de suivre l'ordre des colonnes ni d'ajouter une valeur pour chacune d'entre elles. Inconv\u00e9nient - Les requ\u00eates sont plus longue \u00e0 \u00e9crire. Au niveau de la maintenance, si on modifie un nom de colonne, il faut modifier toutes les requ\u00eates ajoutant des valeurs dans cette colonne. Ins\u00e9rer des donn\u00e9es seulement dans certaines colonnes INSERT INTO ma_table (colonne1) VALUES (valeur1); Les autres champs non sp\u00e9cifi\u00e9s prendront la valeur par d\u00e9faut si elle est d\u00e9fini ou NULL sinon. Ins\u00e9rer plusieurs lignes dans la m\u00eame requ\u00eate La syntaxe est la m\u00eame, on doit seulement s\u00e9parer les s\u00e9ries de valeurs par une virgule : INSERT INTO ma_table VALUES (valeur_a1, valeur_a2, valeur_a3), (valeur_b1, valeur_b2, valeur_b3), (valeur_c1, valeur_c2, valeur_c3), (valeur_d1, valeur_d2, valeur_d3); INSERT INTO ma_table (colonne1, colonne2, colonne3) VALUES (valeur_a1, valeur_a2, valeur_a3), (valeur_b1, valeur_b2, valeur_b3), (valeur_c1, valeur_c2, valeur_c3), (valeur_d1, valeur_d2, valeur_d3); Ins\u00e9rer des valeurs provenant d'une autre table On peut ins\u00e9rer les valeurs d'autres tables en utilisant une sous-requ\u00eate de s\u00e9lection au lieu de sp\u00e9cifier les valeurs dans la section VALUES . INSERT INTO ma_table (colonne1, colonne2, colonne3) SELECT valeur1, valeur2, valeur3 FROM table_source; La requ\u00eate SELECT n'a pas de contraintes et peut contenir plusieurs jointures, des conditions WHERE et HAVING , d'autres sous-requ\u00eate, etc. Si on veut ins\u00e9rer tout le contenu d'une table dans une autre, on peut utiliser l'instruction TABLE et le nom de la table d'o\u00f9 proviennent les donn\u00e9es \u00e0 ins\u00e9rer. INSERT INTO ma_table TABLE table_source Les colonnes de type auto-incr\u00e9ment Ce type de colonne est incr\u00e9ment\u00e9e automatiquement lors d'une insertion de donn\u00e9es, on ne doit pas les ajouter dans nos requ\u00eates d'insertion. R\u00e9cup\u00e9rer la valeur d'une colonne auto-incr\u00e9ment On peut r\u00e9cup\u00e9rer la premi\u00e8re valeur provenant d'un champ auto-incr\u00e9ment qui a \u00e9t\u00e9 ins\u00e9rer avec succ\u00e8s en utilisant la fonction last_insert_id() . INSERT INTO ma_table (colonne1) VALUES (valeur1); SELECT last_insert_id();","title":"INSERT"},{"location":"notes_de_cours/insert/#insert","text":"La commande INSERT est utilis\u00e9e pour ajouter des enregistrements dans une table.","title":"INSERT"},{"location":"notes_de_cours/insert/#syntaxe-de-base","text":"","title":"Syntaxe de base"},{"location":"notes_de_cours/insert/#la-methode-la-plus-simple","text":"INSERT INTO ma_table VALUES (valeur1, valeur2, valeur3); Avantages - Requ\u00eate plus courte - Si on modifie les noms de colonnes, pas besoin de modifier la requ\u00eate. Inconv\u00e9nients Possibilit\u00e9 d'erreurs plus grande, il faut que les valeurs concordent avec le nombre de colonnes et leur position.","title":"La m\u00e9thode la plus simple"},{"location":"notes_de_cours/insert/#la-methode-la-plus-precise","text":"INSERT INTO ma_table (colonne1, colonne2, colonne3) VALUES (valeur1, valeur2, valeur3); Avantages - Plus de pr\u00e9cisions dans la requ\u00eate - On n'est pas forc\u00e9 de suivre l'ordre des colonnes ni d'ajouter une valeur pour chacune d'entre elles. Inconv\u00e9nient - Les requ\u00eates sont plus longue \u00e0 \u00e9crire. Au niveau de la maintenance, si on modifie un nom de colonne, il faut modifier toutes les requ\u00eates ajoutant des valeurs dans cette colonne.","title":"La m\u00e9thode la plus pr\u00e9cise"},{"location":"notes_de_cours/insert/#inserer-des-donnees-seulement-dans-certaines-colonnes","text":"INSERT INTO ma_table (colonne1) VALUES (valeur1); Les autres champs non sp\u00e9cifi\u00e9s prendront la valeur par d\u00e9faut si elle est d\u00e9fini ou NULL sinon.","title":"Ins\u00e9rer des donn\u00e9es seulement dans certaines colonnes"},{"location":"notes_de_cours/insert/#inserer-plusieurs-lignes-dans-la-meme-requete","text":"La syntaxe est la m\u00eame, on doit seulement s\u00e9parer les s\u00e9ries de valeurs par une virgule : INSERT INTO ma_table VALUES (valeur_a1, valeur_a2, valeur_a3), (valeur_b1, valeur_b2, valeur_b3), (valeur_c1, valeur_c2, valeur_c3), (valeur_d1, valeur_d2, valeur_d3); INSERT INTO ma_table (colonne1, colonne2, colonne3) VALUES (valeur_a1, valeur_a2, valeur_a3), (valeur_b1, valeur_b2, valeur_b3), (valeur_c1, valeur_c2, valeur_c3), (valeur_d1, valeur_d2, valeur_d3);","title":"Ins\u00e9rer plusieurs lignes dans la m\u00eame requ\u00eate"},{"location":"notes_de_cours/insert/#inserer-des-valeurs-provenant-dune-autre-table","text":"On peut ins\u00e9rer les valeurs d'autres tables en utilisant une sous-requ\u00eate de s\u00e9lection au lieu de sp\u00e9cifier les valeurs dans la section VALUES . INSERT INTO ma_table (colonne1, colonne2, colonne3) SELECT valeur1, valeur2, valeur3 FROM table_source; La requ\u00eate SELECT n'a pas de contraintes et peut contenir plusieurs jointures, des conditions WHERE et HAVING , d'autres sous-requ\u00eate, etc. Si on veut ins\u00e9rer tout le contenu d'une table dans une autre, on peut utiliser l'instruction TABLE et le nom de la table d'o\u00f9 proviennent les donn\u00e9es \u00e0 ins\u00e9rer. INSERT INTO ma_table TABLE table_source","title":"Ins\u00e9rer des valeurs provenant d'une autre table"},{"location":"notes_de_cours/insert/#les-colonnes-de-type-auto-increment","text":"Ce type de colonne est incr\u00e9ment\u00e9e automatiquement lors d'une insertion de donn\u00e9es, on ne doit pas les ajouter dans nos requ\u00eates d'insertion.","title":"Les colonnes de type auto-incr\u00e9ment"},{"location":"notes_de_cours/insert/#recuperer-la-valeur-dune-colonne-auto-increment","text":"On peut r\u00e9cup\u00e9rer la premi\u00e8re valeur provenant d'un champ auto-incr\u00e9ment qui a \u00e9t\u00e9 ins\u00e9rer avec succ\u00e8s en utilisant la fonction last_insert_id() . INSERT INTO ma_table (colonne1) VALUES (valeur1); SELECT last_insert_id();","title":"R\u00e9cup\u00e9rer la valeur d'une colonne auto-incr\u00e9ment"},{"location":"notes_de_cours/type_relation/","text":"Types de relations Il existe trois types possibles de relation entre les tables : Un \u00e0 plusieurs (1-n) Prenons par exemple un jeu d'aventure qui comprend les tables usagers et personnages (dans ce jeu un usager peut se cr\u00e9er plus d'une partie simultan\u00e9ment). Un usager peut avoir plusieurs personnages, mais chaque personnage est propre \u00e0 un usager. Pour repr\u00e9senter cette relation dans la structure de la base de donn\u00e9es, on va prendre la cl\u00e9 primaire de la table qui correspond au cas unique (ici l'usager) et on va l'ajouter \u00e0 la table \"plusieurs\" (le personnage). Plusieurs \u00e0 plusieurs (n-n) Encore dans ce m\u00eame jeu, on a une table inventaire et une table item. Le personnage peut avoir un inventaire qui contient plusieurs fois le m\u00eame item, et chaque item peut \u00eatre contenu dans plusieurs inventaires diff\u00e9rents. On a donc une relation de plusieurs \u00e0 plusieurs. Au niveau de sa repr\u00e9sentation, on va cr\u00e9er une troisi\u00e8me table \"de jonction\" qui va d\u00e9composer la relation de plusieurs \u00e0 plusieurs en des relations un \u00e0 plusieurs. Pour se faire, on va utiliser la m\u00eame technique que pour la relation 1-n. Dans notre exemple il y aura une relation entre la cl\u00e9 primaire de la table inventaire et un champ \"inventaire_id\" de la table jonction. M\u00eame chose pour la table item et une relation avec la cl\u00e9 primaire et un champ \"item_id\" dans la table jonction. Un \u00e0 un (1-1) Dans cette relation, chaque entr\u00e9e de la premi\u00e8re table ne peut se retrouver qu'une seule fois dans la seconde et vice versa. Cette forme de relation n'est pas tr\u00e8s courante, car habituellement les donn\u00e9es des deux tables seraient stock\u00e9es dans une seule.","title":"Types de relations"},{"location":"notes_de_cours/type_relation/#types-de-relations","text":"Il existe trois types possibles de relation entre les tables :","title":"Types de relations"},{"location":"notes_de_cours/type_relation/#un-a-plusieurs-1-n","text":"Prenons par exemple un jeu d'aventure qui comprend les tables usagers et personnages (dans ce jeu un usager peut se cr\u00e9er plus d'une partie simultan\u00e9ment). Un usager peut avoir plusieurs personnages, mais chaque personnage est propre \u00e0 un usager. Pour repr\u00e9senter cette relation dans la structure de la base de donn\u00e9es, on va prendre la cl\u00e9 primaire de la table qui correspond au cas unique (ici l'usager) et on va l'ajouter \u00e0 la table \"plusieurs\" (le personnage).","title":"Un \u00e0 plusieurs (1-n)"},{"location":"notes_de_cours/type_relation/#plusieurs-a-plusieurs-n-n","text":"Encore dans ce m\u00eame jeu, on a une table inventaire et une table item. Le personnage peut avoir un inventaire qui contient plusieurs fois le m\u00eame item, et chaque item peut \u00eatre contenu dans plusieurs inventaires diff\u00e9rents. On a donc une relation de plusieurs \u00e0 plusieurs. Au niveau de sa repr\u00e9sentation, on va cr\u00e9er une troisi\u00e8me table \"de jonction\" qui va d\u00e9composer la relation de plusieurs \u00e0 plusieurs en des relations un \u00e0 plusieurs. Pour se faire, on va utiliser la m\u00eame technique que pour la relation 1-n. Dans notre exemple il y aura une relation entre la cl\u00e9 primaire de la table inventaire et un champ \"inventaire_id\" de la table jonction. M\u00eame chose pour la table item et une relation avec la cl\u00e9 primaire et un champ \"item_id\" dans la table jonction.","title":"Plusieurs \u00e0 plusieurs (n-n)"},{"location":"notes_de_cours/type_relation/#un-a-un-1-1","text":"Dans cette relation, chaque entr\u00e9e de la premi\u00e8re table ne peut se retrouver qu'une seule fois dans la seconde et vice versa. Cette forme de relation n'est pas tr\u00e8s courante, car habituellement les donn\u00e9es des deux tables seraient stock\u00e9es dans une seule.","title":"Un \u00e0 un (1-1)"},{"location":"notes_de_cours/view/","text":"VIEW En SQL, on peut enregistrer une requ\u00eate qu'on utilise r\u00e9guli\u00e8rement et la r\u00e9utiliser facilement dans d'autres requ\u00eates. Pour ce faire on cr\u00e9e ce qu'on appelle une VIEW . Avantages de cr\u00e9er une VIEW Simplification des requ\u00eates S\u00e9curiser des donn\u00e9es sensibles Faciliter la maintenance Il faut se rappeler qu'une view n'est pas une fa\u00e7on d'optimiser nos requ\u00eates. Quand une view est utilis\u00e9 dans une requ\u00eate, la requ\u00eate de la view est ex\u00e9cut\u00e9 en premier lieu et ensuite la requ\u00eate principale. On pourrait voir \u00e7a comme une sous-requ\u00eate qui est plus simple \u00e0 utiliser pour le programmeur. Cr\u00e9er une VIEW Pour cr\u00e9er une view, on utilise la d\u00e9claration CREATE VIEW CREATE [OR REPLACE] VIEW [nom_bd.]nom_view [(liste_colonne)] AS requ\u00eate_select; Le nom de la view doit \u00eatre unique dans la base de donn\u00e9es, aucune autre view ni table ne doit avoir le m\u00eame nom. Si on ajoute l'option OR REPLACE et que la view existe d\u00e9j\u00e0, la nouvelle view va remplacer l'ancienne, sinon \u00e7a n'aura aucun effet. On peut d\u00e9finir optionnellement les noms de colonnes de la view, sinon les noms de colonnes seront celle de la requ\u00eate select. Pour terminer, on ajoute une requ\u00eate select. La requ\u00eate peut interroger des tables et d'autres views. Exemple CREATE OR REPLACE VIEW etudiant_informatique (nom_complet, da) AS SELECT CONCAT(e.nom, ', ', e.prenom), e.da FROM etudiant e INNER JOIN etudiant_concentration ec ON ec.etudiant_id = e.id INNER JOIN concentration c ON c.id = ec.concentration WHERE c.description = \"Technique informatique\"; Ensuite pour se servir de la view, on n'a qu'\u00e0 utiliser la view comme une table : SELECT * FROM etudiant_informatique ORDER BY da; Modifier une VIEW Pour modifier une view, on peut utiliser la d\u00e9claration CREATE OR REPLACE VIEW ou bien ALTER VIEW. Les deux m\u00e9thodes sont similaire dans leur r\u00e9sultat. On a d\u00e9j\u00e0 vu la syntaxe du CREATE OR REPLACE VIEW. Voici un exemple pour le ALTER VIEW : ALTER VIEW nom_view [(liste_colonne)] AS requ\u00eate_select;; On ne peut pas modifier le nom de la view par ces m\u00e9thodes, pour se faire, on doit utiliser la d\u00e9claration RENAME TABLE Renommer une VIEW RENAME TABLE nom_view_original TO nouveau_nom_view; Supprimer une VIEW DROP VIEW [IF EXISTS] nom_view; Source https://dev.mysql.com/doc/refman/8.0/en/create-view.html https://www.mysqltutorial.org/mysql-views-tutorial.aspx","title":"Les Views"},{"location":"notes_de_cours/view/#view","text":"En SQL, on peut enregistrer une requ\u00eate qu'on utilise r\u00e9guli\u00e8rement et la r\u00e9utiliser facilement dans d'autres requ\u00eates. Pour ce faire on cr\u00e9e ce qu'on appelle une VIEW .","title":"VIEW"},{"location":"notes_de_cours/view/#avantages-de-creer-une-view","text":"Simplification des requ\u00eates S\u00e9curiser des donn\u00e9es sensibles Faciliter la maintenance Il faut se rappeler qu'une view n'est pas une fa\u00e7on d'optimiser nos requ\u00eates. Quand une view est utilis\u00e9 dans une requ\u00eate, la requ\u00eate de la view est ex\u00e9cut\u00e9 en premier lieu et ensuite la requ\u00eate principale. On pourrait voir \u00e7a comme une sous-requ\u00eate qui est plus simple \u00e0 utiliser pour le programmeur.","title":"Avantages de cr\u00e9er une VIEW"},{"location":"notes_de_cours/view/#creer-une-view","text":"Pour cr\u00e9er une view, on utilise la d\u00e9claration CREATE VIEW CREATE [OR REPLACE] VIEW [nom_bd.]nom_view [(liste_colonne)] AS requ\u00eate_select; Le nom de la view doit \u00eatre unique dans la base de donn\u00e9es, aucune autre view ni table ne doit avoir le m\u00eame nom. Si on ajoute l'option OR REPLACE et que la view existe d\u00e9j\u00e0, la nouvelle view va remplacer l'ancienne, sinon \u00e7a n'aura aucun effet. On peut d\u00e9finir optionnellement les noms de colonnes de la view, sinon les noms de colonnes seront celle de la requ\u00eate select. Pour terminer, on ajoute une requ\u00eate select. La requ\u00eate peut interroger des tables et d'autres views. Exemple CREATE OR REPLACE VIEW etudiant_informatique (nom_complet, da) AS SELECT CONCAT(e.nom, ', ', e.prenom), e.da FROM etudiant e INNER JOIN etudiant_concentration ec ON ec.etudiant_id = e.id INNER JOIN concentration c ON c.id = ec.concentration WHERE c.description = \"Technique informatique\"; Ensuite pour se servir de la view, on n'a qu'\u00e0 utiliser la view comme une table : SELECT * FROM etudiant_informatique ORDER BY da;","title":"Cr\u00e9er une VIEW"},{"location":"notes_de_cours/view/#modifier-une-view","text":"Pour modifier une view, on peut utiliser la d\u00e9claration CREATE OR REPLACE VIEW ou bien ALTER VIEW. Les deux m\u00e9thodes sont similaire dans leur r\u00e9sultat. On a d\u00e9j\u00e0 vu la syntaxe du CREATE OR REPLACE VIEW. Voici un exemple pour le ALTER VIEW : ALTER VIEW nom_view [(liste_colonne)] AS requ\u00eate_select;; On ne peut pas modifier le nom de la view par ces m\u00e9thodes, pour se faire, on doit utiliser la d\u00e9claration RENAME TABLE","title":"Modifier une VIEW"},{"location":"notes_de_cours/view/#renommer-une-view","text":"RENAME TABLE nom_view_original TO nouveau_nom_view;","title":"Renommer une VIEW"},{"location":"notes_de_cours/view/#supprimer-une-view","text":"DROP VIEW [IF EXISTS] nom_view;","title":"Supprimer une VIEW"},{"location":"notes_de_cours/view/#source","text":"https://dev.mysql.com/doc/refman/8.0/en/create-view.html https://www.mysqltutorial.org/mysql-views-tutorial.aspx","title":"Source"}]}